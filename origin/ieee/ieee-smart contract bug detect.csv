"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Machine Learning Based Bug Prediction Engine For Smart Contracts","A. GÜl; Y. KÖorĞlu; A. Şen","Bogaziçi Üniversitesi,Bilgisayar Mühendisliği Bölümü; Bogaziçi Üniversitesi,Bilgisayar Mühendisliği Bölümü; Bogaziçi Üniversitesi,Bilgisayar Mühendisliği Bölümü","2020 Turkish National Software Engineering Symposium (UYMS)","9 Nov 2020","2020","","","1","6","As blockchain solutions become widespread, identifying potential bugs in smart contracts written in Solidity language will be important for these solutions to work correctly. To accurately detect these bugs, the developer must use several state-of-the-art bug detection tools and investigate the potential bugs they report. In this study, we first show that one tool is not enough to detect all the bugs as our Static Analysis for Solidity tool (SA-Solidity) and the known SmartCheck and Securify tools identify different bugs in SmartEmbed's experimental set of smart contracts. Then, we develop Machine Learning-based Bug Predictor for Solidity (MLBP-Solidity) which predicts files that would be reported by all the previous bug detection tools. MLBP-Solidity eases the burden on the developer by allowing him/her to focus on a subset of files that are most probably buggy. Our experimental results show that MLBP-Solidity achieves 91-99% accuracy, depending on the type of predicted bug.","","978-1-7281-8541-5","10.1109/UYMS50627.2020.9247056","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9247056","Blockchain;Ethereum;Solidity;Smart Contracts;Bug Prediction","Computer bugs;Smart contracts;Static analysis;Machine learning;Tools;Engines;Software engineering","contracts;cryptography;distributed databases;learning (artificial intelligence);program debugging;program diagnostics;software tools","SmartEmbed;SmartCheck;static analysis;bug predictor;machine learning;bug prediction engine;bug detection tools;MLBP-Solidity;SA-Solidity;Solidity tool;Solidity language;blockchain;smart contracts","","","","28","","9 Nov 2020","","","IEEE","IEEE Conferences"
"Clairvoyance: Cross-contract Static Analysis for Detecting Practical Reentrancy Vulnerabilities in Smart Contracts","J. Ye; M. Ma; Y. Lin; Y. Sui; Y. Xue",University of Science and Technology of China; University of Science and Technology of China; National University of Singapore; University of Technology Sydney; University of Science and Technology of China,"2020 IEEE/ACM 42nd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)","1 Dec 2020","2020","","","274","275","Reentrancy bugs in smart contracts caused a devastating financial loss in 2016, considered as one of the most severe vulnerabilities in smart contracts. Most of the existing general-purpose security tools for smart contracts have claimed to be able to detect reentrancy bugs. In this paper, we present Clairvoyance, a cross-function and cross-contract static analysis by identifying infeasible paths to detect reentrancy vulnerabilities in smart contracts. To reduce FPs, we have summarized five major path protective techniques (PPTs) to support fast yet precise path feasibility checking. We have implemented our approach and compared Clairvoyance with three state-of-the-art tools on 17770 real-worlds contracts. The results show that Clairvoyance yields the best detection accuracy among all the tools.","2574-1926","978-1-4503-7122-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9270398","reentrancy detection;path feasibility analysis;cross contract analysis;smart contract security","Tools;Smart contracts;Computer bugs;Software engineering;Security;Solid modeling;Software development management","contracts;program debugging;program diagnostics;security of data","Clairvoyance;cross-contract static analysis;smart contracts;reentrancy bugs;real-worlds contracts;practical reentrancy vulnerabilities detection;cross-function;path protective techniques;detection accuracy","","","","6","","1 Dec 2020","","","IEEE","IEEE Conferences"
"ReGuard: Finding Reentrancy Bugs in Smart Contracts","C. Liu; H. Liu; Z. Cao; Z. Chen; B. Chen; B. Roscoe","Peking Univ., Beijing, China; Chieftin Lab., Shenzhen, China; Chieftin Lab., Shenzhen, China; Peking Univ., Beijing, China; Chieftin Lab., Shenzhen, China; Chieftin Lab., Shenzhen, China","2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion)","30 Aug 2018","2018","","","65","68","Smart contracts enabled a new way to perform cryptocurrency transactions over blockchains. While this emerging technique introduces free-of-conflicts and transparency, smart contract itself is vulnerable. As a special form of computer program, smart contract can hardly get rid of bugs. Even worse, an exploitable security bug can lead to catastrophic consequences, e.g., loss of cryptocurrency/money. In this demo paper, we focus on the most common type of security bugs in smart contracts, i.e., reentrancy bug, which caused the famous DAO attack with a loss of 60 million US dollars. We presented ReGuard, an fuzzing-based analyzer to automatically detect reentrancy bugs in Ethereum smart contracts. Specifically, ReGuard performs fuzz testing on smart contracts by iteratively generating random but diverse transactions. Based on the runtime traces, ReGuard further dynamically identifies reentrancy vulnerabilities. In the preliminary evaluation, we have analyzed 5 existing Ethereum contracts. ReGuard automatically flagged 7 previously unreported reentrancy bugs. A demo video of ReGuard is at https://youtu.be/XxJ3_-cmUiY.","2574-1934","978-1-4503-5663-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449446","smart contract;reentrancy bug;dynamic analysis","Contracts;Computer bugs;Fuzzing;C++ languages;Engines;Automata","contracts;fuzzy set theory;program testing;security of data","ReGuard;security bugs;Ethereum smart contracts;reentrancy bugs;fuzzing-based analyzer;DAO attack","","21","","14","","30 Aug 2018","","","IEEE","IEEE Conferences"
"A Framework and DataSet for Bugs in Ethereum Smart Contracts","P. Zhang; F. Xiao; X. Luo","Hohai University,College of Computer and Information,Nanjing,P.R.China; Hohai University,College of Computer and Information,Nanjing,P.R.China; Hong Kong Polytechnic University,Department of Computing,HongKong,P.R.China","2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)","2 Nov 2020","2020","","","139","150","Ethereum is the largest blockchain platform that supports smart contracts. Users deploy smart contracts by publishing the smart contract's bytecode to the blockchain. Since the data in the blockchain cannot be modified, even if these contracts contain bugs, it is not possible to patch deployed smart contracts with code updates. Moreover, there is currently neither a comprehensive classification framework for Ethereum smart contract bugs, nor detailed criteria for detecting bugs in smart contracts, making it difficult for developers to fully understand the negative effects of bugs and design new approaches to detect bugs. In this paper, to fill the gap, we first collect as many smart contract bugs as possible from multiple sources and divide these bugs into 9 categories by extending the IEEE Standard Classification for Software Anomalies. Then, we design the criteria for detecting each kind of bugs, and construct a dataset of smart contracts covering all kinds of bugs. With our framework and dataset, developers can learn smart contract bugs and develop new tools to detect and locate bugs in smart contracts. Moreover, we evaluate the state-of-the-art tools for smart contract analysis with our dataset and obtain some interesting findings: 1) Mythril, Slither and Remix are the most worthwhile combination of analysis tools. 2) There are still 10 kinds of bugs that cannot be detected by any analysis tool.","2576-3148","978-1-7281-5619-4","10.1109/ICSME46990.2020.00023","Natural Science Foundation of Jiangsu Province; National Natural Science Foundation of China; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240706","Ethereum;Solidity;Smart contract bug","Software maintenance;Publishing;Computer bugs;Smart contracts;Blockchain;Tools;IEEE Standards","contracts;cryptography;distributed databases;IEEE standards;learning (artificial intelligence);program debugging;software engineering","patch deployed smart contracts;Ethereum smart contract bugs;smart contract analysis;blockchain platform;smart contract bytecode;comprehensive classification;IEEE standard classification;software anomalies","","1","","60","","2 Nov 2020","","","IEEE","IEEE Conferences"
"Finding Ethereum Smart Contracts Security Issues by Comparing History Versions","J. Chen",Monash University,"2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE)","24 Dec 2020","2020","","","1382","1384","Smart contracts are Turing-complete programs running on the blockchain. They cannot be modified, even when bugs are detected. The Selfdestruct function is the only way to destroy a contract on the blockchain system and transfer all the Ethers on the contract balance. Thus, many developers use this function to destroy a contract and redeploy a new one when bugs are detected. In this paper, we propose a deep learning-based method to find security issues of Ethereum smart contracts by finding the updated version of a destructed contract. After finding the updated versions, we use open card sorting to find security issues.","2643-1572","978-1-4503-6768-4","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9286004","Smart Contracts;Ethereum;Security Issues","Smart contracts;Computer bugs;Blockchain;Security;History;Sorting;Software engineering","contracts;learning (artificial intelligence);security of data;Turing machines","destructed contract;deep learning-based method;contract balance;blockchain system;Selfdestruct function;bugs;Turing-complete programs;history versions;Ethereum smart contracts security issues;updated version","","","","12","","24 Dec 2020","","","IEEE","IEEE Conferences"
"Cross-Contract Static Analysis for Detecting Practical Reentrancy Vulnerabilities in Smart Contracts","Y. Xue; M. Ma; Y. Lin; Y. Sui; J. Ye; T. Peng","University of Science and Technology of China,Hefei,China; University of Science and Technology of China,Hefei,China; National University of Singapore,Singapore; University of Technology Sydney,Sydney,Austrilia; University of Science and Technology of China,Hefei,China; University of Science and Technology of China,Hefei,China","2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE)","24 Dec 2020","2020","","","1029","1040","Reentrancy bugs, one of the most severe vulnerabilities in smart contracts, have caused huge financial loss in recent years. Researchers have proposed many approaches to detecting them. However, empirical studies have shown that these approaches suffer from undesirable false positives and false negatives, when the code under detection involves the interaction between multiple smart contracts. In this paper, we propose an accurate and efficient cross-contract reentrancy detection approach in practice. Rather than design rule-of-thumb heuristics, we conduct a large empirical study of 11714 real-world contracts from Etherscan against three well-known general-purpose security tools for reentrancy detection. We manually summarized the reentrancy scenarios where the state-of-the-art approaches cannot address. Based on the empirical evidence, we present Clairvoyance, a cross-function and cross-contract static analysis to detect reentrancy vulnerabilities in real world with significantly higher accuracy. To reduce false negatives, we enable, for the first time, a cross-contract call chain analysis by tracking possibly tainted paths. To reduce false positives, we systematically summarized five major path protective techniques (PPTs) to support fast yet precise path feasibility checking. We implemented our approach and compared Clairvoyance with five state-of-the-art tools on 17770 real-worlds contracts. The results show that Clairvoyance yields the best detection accuracy among all the five tools and also finds 101 unknown reentrancy vulnerabilities.","2643-1572","978-1-4503-6768-4","","National Natural Science Foundation of China(grant numbers:61972373); Australian Research Council(grant numbers:DP200101328); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9286095","reentrancy vulnerabilities;static taint analysis;cross-contract analysis;smart contracts","Smart contracts;Computer bugs;Static analysis;Tools;Security;Software engineering","contracts;data flow analysis;program diagnostics;security of data","cross-function;cross-contract static analysis;false negatives;cross-contract call chain analysis;17770 real-worlds contracts;detection accuracy;101 unknown reentrancy vulnerabilities;practical reentrancy vulnerabilities;reentrancy bugs;severe vulnerabilities;huge financial loss;undesirable false positives;multiple smart contracts;accurate cross-contract reentrancy detection approach;efficient cross-contract reentrancy detection approach;real-world contracts;well-known general-purpose security tools;reentrancy scenarios;empirical evidence","","","","53","","24 Dec 2020","","","IEEE","IEEE Conferences"
"DEFECTCHECKER: Automated Smart Contract Defect Detection by Analyzing EVM Bytecode","J. Chen; X. Xia; D. Lo; J. Grundy; X. Luo; T. Chen","Faculty of Information Technology, Monash University Faculty of Information Technology, 224480 Clayton, Victoria, Australia, 3168 (e-mail: Jiachi.Chen@monash.edu); Faculty of Information Technology, Monash University Faculty of Information Technology, 224480 Clayton, Victoria, Australia, 3800 (e-mail: xxia@zju.edu.cn); School of Information Systems, Singapore Management University, Singapore, Singapore, Singapore, 17890 (e-mail: davidlo@smu.edu.sg); Faculty of IT, Monash University, Clayton, Victoria, Australia, 3800 (e-mail: john.grundy@monash.edu); Department of Computing, The Hong Kong Polytechnic University, Hong Kong, Hong Kong, Hong Kong, (e-mail: csxluo@comp.polyu.edu.hk); Institute of Big Data Security, Big Data Research Center, University of Electronic Science and Technology of China, Chengdu, Sichuan, China, (e-mail: brokendragon@uestc.edu.cn)","IEEE Transactions on Software Engineering","","2021","PP","99","1","1","Smart contracts are Turing-complete programs running on the blockchain. They are immutable and cannot be modified, even when bugs are detected. Therefore, ensuring smart contracts are bug-free and well-designed before deploying them to the blockchain is extremely important. A contract defect is an error, flaw or fault in a smart contract that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. Detecting and removing contract defects can avoid potential bugs and make programs more robust. Our previous work defined 20 contract defects for smart contracts and divided them into five impact levels. According to our classification, contract defects with seriousness level between 1-3 can lead to unwanted behaviors, e.g., a contract being controlled by attackers. In this paper, we propose DefectChecker, a symbolic execution-based approach and tool to detect eight contract defects that can cause unwanted behaviors of smart contracts on the Ethereum blockchain platform. DefectChecker can detect contract defects from smart contracts' bytecode. We compare DefectChecker with key previous works, including Oyente, Mythril and Securify by using an open-source dataset. Our experimental results show that DefectChecker performs much better than these tools in terms of both speed and accuracy. We also applied DefectChecker to 165,621 distinct smart contracts on the Ethereum platform. We found that 25,815 of these smart contracts contain at least one of the contract defects that belongs to impact level 1-3, including some real-world attacks.","1939-3520","","10.1109/TSE.2021.3054928","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9337195","Smart Contracts;Ethereum;Contract Defects Detection;Bytecode Analyze;Symbolic Execution","Smart contracts;Blockchain;Tools;Computer bugs;Computer hacking;Virtual machining;Organizations","","","","","","","IEEE","27 Jan 2021","","","IEEE","IEEE Early Access Articles"
"Smart Contract: Attacks and Protections","S. Sayeed; H. Marco-Gisbert; T. Caira","School of Computing, Engineering and Physical Sciences, University of the West of Scotland, Paisley, U.K.; School of Computing, Engineering and Physical Sciences, University of the West of Scotland, Paisley, U.K.; School of Computing, Engineering and Physical Sciences, University of the West of Scotland, Paisley, U.K.","IEEE Access","12 Feb 2020","2020","8","","24416","24427","Smart contracts are programs that reside within decentralized blockchains and are executed pursuant to triggered instructions. A smart contract acts in a similar way to a traditional agreement but negates the necessity for the involvement of a third party. Smart contracts are capable of initiating their commands automatically, thus eliminating the involvement of a regulatory body. As a consequence of blockchain's immutable feature, smart contracts are developed in a manner that is distinct from traditional software. Once deployed to the blockchain, a smart contract cannot be modified or updated for security patches, thus encouraging developers to implement strong security strategies before deployment in order to avoid potential exploitation at a later time. However, the most recent dreadful attacks and the multifarious existing vulnerabilities which result as a consequence of the absence of security patches have challenged the sustainability of this technology. Attacks such as the Decentralized Autonomous Organization (DAO) attack and the Parity Wallet hack have cost millions of dollars simply as a consequence of naïve bugs in the smart contract code. In this paper, we classify blockchain exploitation techniques into 4 categories based on the attack rationale; attacking consensus protocols, bugs in the smart contract, malware running in the operating system, and fraudulent users. We then focus on smart contract vulnerabilities, analyzing the 7 most important attack techniques to determine the real impact on smart contract technology. We reveal that even adopting the 10 most widely used tools to detect smart contract vulnerabilities, these still contain known vulnerabilities, providing a dangerously false sense of security. We conclude the paper with a discussion about recommendations and future research lines to progress towards a secure smart contract solution.","2169-3536","","10.1109/ACCESS.2020.2970495","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8976179","Smart contracts;attack techniques;DApp;Ethereum;vulnerability","Smart contracts;Blockchain;Bitcoin;Computer bugs","contracts;cryptography;distributed databases;invasive software;program debugging","smart contract code;smart contract vulnerabilities;smart contract technology;secure smart contract solution;decentralized blockchains;security patches;decentralized autonomous organization attack;DAO attack;Parity Wallet hack;naïve bugs;malware","","10","","75","CCBY","30 Jan 2020","","","IEEE","IEEE Journals"
"SmartCheck: Static Analysis of Ethereum Smart Contracts","S. Tikhomirov; E. Voskresenskaya; I. Ivanitskiy; R. Takhaviev; E. Marchenko; Y. Alexandrov","Univ. of Luxembourg, Luxembourg City, Luxembourg; SmartDec, Moscow, Russia; SmartDec, Moscow, Russia; SmartDec, Moscow, Russia; SmartDec, Moscow, Russia; SmartDec, Moscow, Russia","2018 IEEE/ACM 1st International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB)","26 Aug 2018","2018","","","9","16","Ethereum is a major blockchain-based platform for smart contracts - Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. Solidity is the most mature high-level smart contract language. Ethereum is a hostile execution environment, where anonymous attackers exploit bugs for immediate financial gain. Developers have a very limited ability to patch deployed contracts. Hackers steal up to tens of millions of dollars from flawed contracts, a well-known example being ""The DAO"", broken in June 2016. Advice on secure Ethereum programming practices is spread out across blogs, papers, and tutorials. Many sources are outdated due to a rapid pace of development in this field. Automated vulnerability detection tools, which help detect potentially problematic language constructs, are still underdeveloped in this area. We provide a comprehensive classification of code issues in Solidity and implement SmartCheck - an extensible static analysis tool that detects them. SmartCheck translates Solidity source code into an XML-based intermediate representation and checks it against XPath patterns. We evaluated our tool on a big dataset of real-world contracts and compared the results with manual audit on three contracts. Our tool reflects the current state of knowledge on Solidity vulnerabilities and shows significant improvements over alternatives. SmartCheck has its limitations, as detection of some bugs requires more sophisticated techniques such as taint analysis or even manual audit. We believe though that a static analyzer should be an essential part of contract developers' toolbox, letting them fix simple bugs fast and allocate more effort to complex issues.","","978-1-4503-5726-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445052","Ethereum;Solidity;smart contracts;static analysis;bug detection","Contracts;Static analysis;Tools;Computer bugs;Computer hacking","contracts;program debugging;program diagnostics;security of data;source code (software);XML","SmartCheck;Ethereum smart contracts;blockchain-based platform;decentralized network;high-level smart contract language;hostile execution environment;anonymous attackers;bugs;patch deployed contracts;flawed contracts;secure Ethereum programming practices;automated vulnerability detection tools;extensible static analysis tool;Solidity source code;XML-based intermediate representation;real-world contracts;manual audit;shows significant improvements;taint analysis;static analyzer;contract developers;financial gain","","1","1","41","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Towards Automated Reentrancy Detection for Smart Contracts Based on Sequential Models","P. Qian; Z. Liu; Q. He; R. Zimmermann; X. Wang","School of Computer and Information Engineering, Zhejiang Gongshang University, Hangzhou, China; School of Computer and Information Engineering, Zhejiang Gongshang University, Hangzhou, China; Department of Computer Science, Zhejiang University, Hangzhou, China; School of Computing, National University of Singapore, Singapore; School of Computer and Information Engineering, Zhejiang Gongshang University, Hangzhou, China","IEEE Access","3 Feb 2020","2020","8","","19685","19695","In the last decade, smart contract security issues lead to tremendous losses, which has attracted increasing public attention both in industry and in academia. Researchers have embarked on efforts with logic rules, symbolic analysis, and formal analysis to achieve encouraging results in smart contract vulnerability detection tasks. However, the existing detection tools are far from satisfactory. In this paper, we attempt to utilize the deep learning-based approach, namely bidirectional long-short term memory with attention mechanism (BLSTM-ATT), aiming to precisely detect reentrancy bugs. Furthermore, we propose contract snippet representations for smart contracts, which contributes to capturing essential semantic information and control flow dependencies. Our extensive experimental studies on over 42,000 real-world smart contracts show that our proposed model and contract snippet representations significantly outperform state-of-the-art methods. In addition, this work proves that it is practical to apply deep learning-based technology on smart contract vulnerability detection, which is able to promote future research towards this area.","2169-3536","","10.1109/ACCESS.2020.2969429","National Basic Research Program of China (973 Program)(grant numbers:2017YFB1401300,2017YFB1401304); National Natural Science Foundation of China(grant numbers:61902348); Natural Science Foundation of Zhejiang Province(grant numbers:LQ19F020001); Science and Technology Innovation Program of Zhejiang Province, China(grant numbers:2019R408070); General Scientific Research Projects of Zhejiang Provincial Department of Education, China(grant numbers:Y201942758); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8970384","Blockchain;smart contract;deep learning;sequential models;vulnerability detection","Smart contracts;Security;Blockchain;Deep learning;Tools;Computer bugs","contracts;learning (artificial intelligence);security of data","sequential models;smart contract security issues;public attention;logic rules;symbolic analysis;formal analysis;smart contract vulnerability detection tasks;deep learning-based approach;long-short term memory;attention mechanism;reentrancy bugs;contract snippet representations;real-world smart contracts;deep learning-based technology","","3","","40","CCBY","28 Jan 2020","","","IEEE","IEEE Journals"
"Smarter Smart Contract Development Tools","M. Coblenz; J. Sunshine; J. Aldrich; B. A. Myers","School of Computer Science, Carnegie Mellon University, Pittsburgh, USA; School of Computer Science, Carnegie Mellon University, Pittsburgh, USA; School of Computer Science, Carnegie Mellon University, Pittsburgh, USA; School of Computer Science, Carnegie Mellon University, Pittsburgh, USA","2019 IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB)","5 Sep 2019","2019","","","48","51","Much recent work focuses on finding bugs and security vulnerabilities in smart contracts written in existing languages. Although this approach may be helpful, it does not address flaws in the underlying programming language, which can facilitate writing buggy code in the first place. We advocate a re-thinking of the blockchain software engineering tool set, starting with the programming language in which smart contracts are written. In this paper, we propose and justify requirements for a new generation of blockchain software development tools. New tools should (1) consider users' needs as a primary concern; (2) seek to facilitate safe development by detecting relevant classes of serious bugs at compile time; (3) as much as possible, be blockchain-agnostic, given the wide variety of different blockchain platforms available, and leverage the properties that are common among blockchain environments to improve safety and developer effectiveness.","","978-1-7281-2257-1","10.1109/WETSEB.2019.00013","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8823902","smart contracts, usability of programming languages, blockchain","Blockchain;Smart contracts;Computer bugs;Computer languages;Tools;Software","contracts;program compilers;program debugging;security of data;software engineering;software tools","smarter smart contract development;security vulnerabilities;smart contracts;buggy code;blockchain software engineering tool set;blockchain software development tools;blockchain environments;programming language;blockchain platforms","","1","","28","","5 Sep 2019","","","IEEE","IEEE Conferences"
"Empirical Review of Automated Analysis Tools on 47,587 Ethereum Smart Contracts","T. Durieux; J. F. Ferreira; R. Abreu; P. Cruz","INESC-ID and IST, University of Lisbon,Portugal; INESC-ID and IST, University of Lisbon,Portugal; INESC-ID and IST, University of Lisbon,Portugal; INESC-ID and IST, University of Lisbon,Portugal","2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE)","21 Dec 2020","2020","","","530","541","Over the last few years, there has been substantial research on automated analysis, testing, and debugging of Ethereum smart contracts. However, it is not trivial to compare and reproduce that research. To address this, we present an empirical evaluation of 9 state-of-the-art automated analysis tools using two new datasets: i) a dataset of 69 annotated vulnerable smart contracts that can be used to evaluate the precision of analysis tools; and ii) a dataset with all the smart contracts in the Ethereum Blockchain that have Solidity source code available on Etherscan (a total of 47,518 contracts). The datasets are part of SmartBugs, a new extendable execution framework that we created to facilitate the integration and comparison between multiple analysis tools and the analysis of Ethereum smart contracts. We used SmartBugs to execute the 9 automated analysis tools on the two datasets. In total, we ran 428,337 analyses that took approximately 564 days and 3 hours, being the largest experimental setup to date both in the number of tools and in execution time. We found that only 42% of the vulnerabilities from our annotated dataset are detected by all the tools, with the tool Mythril having the higher accuracy (27%). When considering the largest dataset, we observed that 97% of contracts are tagged as vulnerable, thus suggesting a considerable number of false positives. Indeed, only a small number of vulnerabilities (and of only two categories) were detected simultaneously by four or more tools.","1558-1225","978-1-4503-7121-6","","Horizon 2020(grant numbers:822404); FCT, Fundação para a Ciência e a Tecnologia(grant numbers:UIDB/50021/2020,PTDC/CCI-COM/29300/2017); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9284023","Smart contracts;Solidity;Ethereum;Blockchain;Tools;Debugging;Testing;Reproducible Bugs","Smart contracts;Computer bugs;Debugging;Blockchain;Tools;Testing;Software engineering","blockchains;contracts;program debugging","automated analysis tools;vulnerable smart contracts;extendable execution framework;SmartBugs;Solidity source code;Ethereum smart contracts;largest dataset;annotated dataset;multiple analysis tools;Ethereum blockchain","","","","44","","21 Dec 2020","","","IEEE","IEEE Conferences"
"Pluto: Exposing Vulnerabilities in Inter-Contract Scenarios","F. Ma; Z. Xu; M. Ren; Z. Yin; Y. Chen; L. Qiao; B. Gu; H. Li; Y. Jiang; J. Sun","School of Software, Tsinghua University, 12442 Beijing, Beijing, China, (e-mail: mafc19@mails.tsinghua.edu.cn); Computer Science, University of Waterloo, 8430 Waterloo, Ontario, Canada, (e-mail: zhenyang.xu@uwaterloo.ca); School of Software, Tsinghua University, 12442 Beijing, Beijing, China, (e-mail: rm19@mails.tsinghua.edu.cn); School of Software, Tsinghua University, 12442 Beijing, Beijing, China, (e-mail: Aurora@europe.com); School of Software, Tsinghua University, 12442 Beijing, Beijing, China, (e-mail: yuanliang.chen@cs.ox.ac.uk); Beijing Institute of Control Engineering, 154569 Beijing, Beijing, China, (e-mail: fly2mars@163.com); Beijing Institute of Control Engineering, 154569 Beijing, Beijing, China, (e-mail: gubinbj@sina.com); WeBank, WeBank, Shenzhen, Guanggong, China, (e-mail: wheatli@webank.com); Dept.CST, Tsinghua university, Beijing, Beijing, China, 100084 (e-mail: jiangyu198964@126.com); School of Software, Tsinghua University, Beijing 100084, Beijing, China, (e-mail: sunjg@tsinghua.edu.cn)","IEEE Transactions on Software Engineering","","2021","PP","99","1","1","Attacks on smart contracts have caused considerable losses to digital assets. Many techniques based on symbolic execution, fuzzing, and static analysis are used to detect contract vulnerabilities. Most of the current analyzers only consider vulnerability detection intra-contract scenarios. However, Ethereum contracts usually interact with others by calling their functions. A bug hidden in a path that depends on information from external contract calls is defined as an inter-contract vulnerability. Failure to deal with this kind of bug can result in potential false negatives and false positives. In this work, we propose Pluto, which supports vulnerability detection in inter-contract scenarios. It first builds an Inter-contract Control Flow Graph (ICFG) to extract semantic information among contract calls. Afterward, it symbolically explores the ICFG and deduces Inter-Contract Path Constraints (ICPC) to check the reachability of execution paths more accurately. Finally, Pluto detects whether there is a vulnerability based on some predefined rules. For evaluation, we compare Pluto with five state-of-the-art tools, including Oyente, Mythril, Securify, ILF, and Clairvoyance on a labeled benchmark and 39,443 real-world Ethereum smart contracts. The result shows that other tools can only detect 10% of the inter-contract vulnerabilities, while Pluto can detect 80% of them on the labeled dataset. Beyond that, Pluto has detected 451 confirmed vulnerabilities on real-world contracts, including 36 vulnerabilities in inter-contract scenarios. Two bugs have been assigned with unique CVE identifiers by the US National Vulnerability Database (NVD). On average, Pluto costs 16.9 seconds to analyze a contract, which is as fast as the state-of-the-art tools.","1939-3520","","10.1109/TSE.2021.3117966","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9562567","Smart Contracts;Ethereum;Inter-Contract Vulnerabilities","Pluto;Tools;Smart contracts;Semantics;Computer bugs;Codes;Virtual machining","","","","","","","IEEE","7 Oct 2021","","","IEEE","IEEE Early Access Articles"
"Combining Graph Neural Networks with Expert Knowledge for Smart Contract Vulnerability Detection","Z. Liu; P. Qian; X. Wang; Y. Zhuang; L. Qiu; X. Wang","School of computer and information engineering, Zhejiang Gongshang University, 12625 Hangzhou, Zhejiang, China, (e-mail: liuzhenguang2008@gmail.com); School of Computer and Information Engineering, Zhejiang Gongshang University, 12625 Hangzhou, Zhejiang, China, (e-mail: messi.qp711@gmail.com); School of Computer and Information Engineering, Zhejiang Gongshang University, 12625 Hangzhou, Zhejiang, China, (e-mail: xiaoyangw@zjgsu.edu.cn); School of Computing, National University of Singapore, 37580 Singapore, Singapore, Singapore, (e-mail: zhuangyuan2020@outlook.com); Department of Computer Science and Engineering, Southern University of Science and Technology, 255310 Shenzhen, Guangdong, China, (e-mail: lin_qiu@u.nus.edu); School of Computer Science and Information Engineering, Zhejiang Gongshang University, 12625 Hangzhou, Zhejiang, China, (e-mail: xwang@zjgsu.edu.cn)","IEEE Transactions on Knowledge and Data Engineering","","2021","PP","99","1","1","Smart contract vulnerability detection draws extensive attention in recent years due to the substantial losses caused by hacker-attacks. Existing efforts for contract security analysis heavily rely on rigid rules defined by experts, which is labor-intensive and non-scalable. More importantly, expert-defined rules tend to be error-prone and suffer the inherent risk of being cheated by crafty attackers. Recent researches focus on the symbolic execution and formal analysis of smart contract for vulnerability detection, yet to achieve a precise and scalable solution. Although several methods have been proposed to detect vulnerabilities in smart contracts, there is still a lack of effort that considers combining expert-defined security patterns with deep neural networks. In this paper, we explore using graph neural networks and expert knowledge for smart contract vulnerability detection. Specifically, we cast the rich control- and data- flow semantics of the source code into a contract graph. Then, we propose a novel temporal message propagation network to extract graph feature from the normalized graph, and combine the graph feature with expert patterns to yield a final detection system. Extensive experiments are conducted on all the smart contracts that have source code in two platforms. Empirical results show significant accuracy improvements over state-of-the-art methods.","1558-2191","","10.1109/TKDE.2021.3095196","National Natural Science Foundation of China(grant numbers:61802345,61902348); Natural Science Foundation of Zhejiang Province China(grant numbers:LQ19F020001); Research Program of Zhejiang Lab(grant numbers:2019KD0AC02); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9477066","Deep learning;blockchain;smart contract;vulnerability detection;expert knowledge","Smart contracts;Feature extraction;Blockchain;Security;Semantics;Computer bugs;Knowledge engineering","","","","","","","IEEE","7 Jul 2021","","","IEEE","IEEE Early Access Articles"
"Using Fault Injection to Assess Blockchain Systems in Presence of Faulty Smart Contracts","Á. Hajdu; N. Ivaki; I. Kocsis; A. Klenik; L. Gönczy; N. Laranjeiro; H. Madeira; A. Pataricza","Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary; Department of Informatics Engineering, University of Coimbra, Coimbra, CISUC, Portugal; Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary; Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary; Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary; Department of Informatics Engineering, University of Coimbra, Coimbra, CISUC, Portugal; Department of Informatics Engineering, University of Coimbra, Coimbra, CISUC, Portugal; Department of Measurement and Information Systems, Budapest University of Technology and Economics, Budapest, Hungary","IEEE Access","27 Oct 2020","2020","8","","190760","190783","Blockchain has become particularly popular due to its promise to support business-critical services in very different domains (e.g., retail, healthcare). Blockchain systems rely on complex middleware, like Ethereum or Hyperledger Fabric, that allow running smart contracts, which specify business logic in cooperative applications. The presence of software defects in these contracts has notably caused failures, including severe security problems. In this article, we use software-implemented fault injection (SWIFI) to assess the behavior of permissioned blockchain systems in the presence of faulty smart contracts. We emulate the occurrence of general software faults and also blockchain-specific software faults (e.g., missing require on transaction sender) in smart contracts code and observe the impact on the overall system dependability in terms of reliability and integrity. We also analyze the effectiveness of formal verification and runtime protection mechanisms in detecting the injected faults. Results indicate that formal verification and runtime protections have to complement built-in platform checks to guarantee proper dependability of blockchain systems. The work presented in this article allows smart contract developers to become aware of possible faults in smart contracts and to understand the impact of their presence. It also provides valuable information for middleware developers to improve the overall fault tolerance of their systems.","2169-3536","","10.1109/ACCESS.2020.3032239","Bi-Lateral FCT-NKFIH Program Portugal-Hungary, through the Project Advanced Analytics for Empirical Assessment of Cloud Resilience; European Union’s Horizon 2020 Research and Innovation Program through the Marie Sklodowska-Curie(grant numbers:823788); NRDI Fund Based on the Charter of Bolster Issued by the NRDI Office under the Auspices of the Ministry for Innovation and Technology; ÚNKP-19-3 New National Excellence Program of the Ministry for Innovation and Technology; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9229414","Blockchain systems;dependability;fault injection;formal verification;smart contracts","Smart contracts;Blockchain;Software;Distributed ledger;Fabrics;Computer bugs","business data processing;contracts;cryptography;distributed databases;middleware;program verification;software fault tolerance","fault detection;security problems;hyperledger fabric;Ethereum;permissioned blockchain systems;software-implemented fault injection;software defects;business logic;middleware;business-critical services;faulty smart contracts;fault tolerance;runtime protections;formal verification;system dependability;smart contracts code;blockchain-specific software faults","","1","","62","CCBY","19 Oct 2020","","","IEEE","IEEE Journals"
"SafePay on Ethereum: A Framework For Detecting Unfair Payments in Smart Contracts","Y. Li; H. Liu; Z. Yang; Q. Ren; L. Wang; B. Chen","Oxford-Hainan Blockchain Research Institute,Hainan,China; Oxford-Hainan Blockchain Research Institute,Hainan,China; Oxford-Hainan Blockchain Research Institute,Hainan,China; Oxford-Hainan Blockchain Research Institute,Hainan,China; Oxford-Hainan Blockchain Research Institute,Hainan,China; Oxford-Hainan Blockchain Research Institute,Hainan,China","2020 IEEE 40th International Conference on Distributed Computing Systems (ICDCS)","23 Feb 2021","2020","","","1219","1222","Smart contracts on the Ethereum blockchain are notoriously known as vulnerable to external attacks. Many of their issues led to a considerably large financial loss as they resulted from broken payments by digital assets, e.g., cryptocurrency. Existing research focused on specific patterns to find such problems, e.g., reentrancy bug, nondeterministic recipient etc., yet may lead to false alarms or miss important issues. To mitigate these limitations, we designed the SafePay analysis framework to find unfair payments in Ethereum smart contracts. Compared to existing analyzers, SafePay can detect potential blockchain transactions with feasible exploits thus effectively avoid false reports. Specifically, the detection is driven by a systematic search for violations on fair value exchange (FVE), i.e., a new security invariant introduced in SafePay to indicate that each party “fairly” pays to others. The preliminary evaluation validated the efficacy of SafePay by reporting previously unknown issues and decreasing the number of false alarms.","2575-8411","978-1-7281-7002-2","10.1109/ICDCS47774.2020.00116","Research and Development; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9355580","Smart contract;Symbolic execution;Taint analysis;Insecure message call","Systematics;Conferences;Smart contracts;Blockchain;Cryptocurrency;Security;Distributed computing","blockchains;contracts;data mining;electronic money","unfair payments;Ethereum blockchain;external attacks;broken payments;digital assets;reentrancy bug;false alarms;SafePay analysis framework;Ethereum smart contracts;potential blockchain transactions;false reports","","","","8","","23 Feb 2021","","","IEEE","IEEE Conferences"
"VERISMART: A Highly Precise Safety Verifier for Ethereum Smart Contracts","S. So; M. Lee; J. Park; H. Lee; H. Oh","Korea University,Department of Computer Science and Engineering; Korea University,Department of Computer Science and Engineering; Korea University,Department of Computer Science and Engineering; Korea University,Department of Computer Science and Engineering; Korea University,Department of Computer Science and Engineering","2020 IEEE Symposium on Security and Privacy (SP)","30 Jul 2020","2020","","","1678","1694","We present VERISMART, a highly precise verifier for ensuring arithmetic safety of Ethereum smart contracts. Writing safe smart contracts without unintended behavior is critically important because smart contracts are immutable and even a single flaw can cause huge financial damage. In particular, ensuring that arithmetic operations are safe is one of the most important and common security concerns of Ethereum smart contracts nowadays. In response, several safety analyzers have been proposed over the past few years, but state-of-the-art is still unsatisfactory; no existing tools achieve high precision and recall at the same time, inherently limited to producing annoying false alarms or missing critical bugs. By contrast, VERISMART aims for an uncompromising analyzer that performs exhaustive verification without compromising precision or scalability, thereby greatly reducing the burden of manually checking undiscovered or incorrectly-reported issues. To achieve this goal, we present a new domain-specific algorithm for verifying smart contracts, which is able to automatically discover and leverage transaction invariants that are essential for precisely analyzing smart contracts. Evaluation with real-world smart contracts shows that VERISMART can detect all arithmetic bugs with a negligible number of false alarms, far outperforming existing analyzers.","2375-1207","978-1-7281-3497-0","10.1109/SP40000.2020.00032","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9152689","","Contracts;Safety;Computer bugs;Tools;Writing","contracts;cryptocurrencies;formal verification;program debugging","VERISMART;Ethereum smart contracts;precise verifier;arithmetic safety;safe smart contracts;safety analyzers;false alarms;missing critical bugs;real-world smart contracts;precise safety verifier","","5","","68","","30 Jul 2020","","","IEEE","IEEE Conferences"
"Smart Contract Security: A Software Lifecycle Perspective","Y. Huang; Y. Bian; R. Li; J. L. Zhao; P. Shi","School of Computer Engineering, Jiangsu University of Technology, Changzhou, China; School of Information Management, Nanjing University, Nanjing, China; School of Computer Engineering, Jiangsu University of Technology, Changzhou, China; Department of Information Systems, City University of Hong Kong, Hong Kong; School of Computer Engineering, Jiangsu University of Technology, Changzhou, China","IEEE Access","23 Oct 2019","2019","7","","150184","150202","Smart contract security is an emerging research area that deals with security issues arising from the execution of smart contracts in a blockchain system. Generally, a smart contract is a piece of executable code that automatically runs on the blockchain to enforce an agreement preset between parties involved in the transaction. As an innovative technology, smart contracts have been applied in various business areas, such as digital asset exchange, supply chains, crowdfunding, and intellectual property. Unfortunately, many security issues in smart contracts have been reported in the media, often leading to substantial financial losses. These security issues pose new challenges to security research because the execution environment of smart contracts is based on blockchain computing and its decentralized nature of execution. Thus far, many partial solutions have been proposed to address specific aspects of these security issues, and the trend is to develop new methods and tools to automatically detect common security vulnerabilities. However, smart contract security is systematic engineering that should be explored from a global perspective, and a comprehensive study of issues in smart contract security is urgently needed. To this end, we conduct a literature review of smart contract security from a software lifecycle perspective. We first analyze the key features of blockchain that can cause security issues in smart contracts and then summarize the common security vulnerabilities of smart contracts. To address these vulnerabilities, we examine recent advances in smart contract security spanning four development phases: 1) security design; 2) security implementation; 3) testing before deployment; and 4) monitoring and analysis. Finally, we outline emerging challenges and opportunities in smart contract security for blockchain engineers and researchers.","2169-3536","","10.1109/ACCESS.2019.2946988","Shenzhen Science and Technology Innovation Commission(grant numbers:JCY20170818100156260); National Natural Science Foundation of China(grant numbers:61472166,61672270,61602216); Humanities and Social Science Research Fund of the Ministry of Education in China(grant numbers:18YJC840045); Natural Science Foundation of Jiangsu Province(grant numbers:BK20161199); Natural Science Foundation of the Jiangsu University of Technology(grant numbers:KYY16033); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8864988","Blockchain;Ethereum;information security;smart contract;software engineering;software lifecycle","Smart contracts;Security;Blockchain;Software;Fabrics;Computer bugs","security of data;software engineering","smart contract security;security issues;security vulnerabilities;blockchain computing;software lifecycle perspective;security design phase;security implementation phase;testing before deployment phase;monitoring and analysis phase","","10","","100","CCBY","14 Oct 2019","","","IEEE","IEEE Journals"
"ConFuzzius: A Data Dependency-Aware Hybrid Fuzzer for Smart Contracts","C. F. Torres; A. K. Iannillo; A. Gervais; R. State","University of Luxembourg,SnT; University of Luxembourg,SnT; Imperial College London; University of Luxembourg,SnT","2021 IEEE European Symposium on Security and Privacy (EuroS&P)","4 Nov 2021","2021","","","103","119","Smart contracts are Turing-complete programs that are executed across a blockchain. Unlike traditional programs, once deployed, they cannot be modified. As smart contracts carry more value, they become more of an exciting target for attackers. Over the last years, they suffered from exploits costing millions of dollars due to simple programming mistakes. As a result, a variety of tools for detecting bugs have been proposed. Most of these tools rely on symbolic execution, which may yield false positives due to over-approximation. Recently, many fuzzers have been proposed to detect bugs in smart contracts. However, these tend to be more effective in finding shallow bugs and less effective in finding bugs that lie deep in the execution, therefore achieving low code coverage and many false negatives. An alternative that has proven to achieve good results in traditional programs is hybrid fuzzing, a combination of symbolic execution and fuzzing. In this work, we study hybrid fuzzing on smart contracts and present ConFuzzius, the first hybrid fuzzer for smart contracts. ConFuzzius uses evolutionary fuzzing to exercise shallow parts of a smart contract and constraint solving to generate inputs that satisfy complex conditions that prevent evolutionary fuzzing from exploring deeper parts. Moreover, ConFuzzius leverages dynamic data dependency analysis to efficiently generate sequences of transactions that are more likely to result in contract states in which bugs may be hidden. We evaluate the effectiveness of ConFuzzius by comparing it with state-of-the-art symbolic execution tools and fuzzers for smart contracts. Our evaluation on a curated dataset of 128 contracts and a dataset of 21K real-world contracts shows that our hybrid approach detects more bugs than state-of-the-art tools (up to 23%) and that it outperforms existing tools in terms of code coverage (up to 69%). We also demonstrate that data dependency analysis can boost bug detection up to 18%.","","978-1-6654-1491-3","10.1109/EuroSP51992.2021.00018","Luxembourg National Research Fund (FNR)(grant numbers:13192291); European Unions Horizon 2020 research and innovation programme(grant numbers:830927); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9581164","Ethereum;smart contracts;hybrid fuzzing;data dependency analysis;genetic algorithm;symbolic execution","Codes;Costing;Smart contracts;Computer bugs;Tools;Fuzzing;Programming","","","","","","52","","4 Nov 2021","","","IEEE","IEEE Conferences"
"AaYusH: A Smart Contract-Based Telesurgery System for Healthcare 4.0","R. Gupta; A. Shukla; S. Tanwar","Department of Computer Science and Engineering, Institute of Technology, Nirma University, Ahmedabad, Gujarat, India; Department of Computer Science and Engineering, Institute of Technology, Nirma University, Ahmedabad, Gujarat, India; Department of Computer Science and Engineering, Institute of Technology, Nirma University, Ahmedabad, Gujarat, India","2020 IEEE International Conference on Communications Workshops (ICC Workshops)","21 Jul 2020","2020","","","1","6","Telesurgery (TS) with 5G-enabled Tactile Internet (TI) has enormous potential to deliver real-time ultra-responsive surgical services remotely with high quality and accuracy. It is quite beneficial for society in the prospect of highly precise surgical diagnosis. However, the existing TS systems have security, privacy, latency, and blockchain (BC) storage cost issues, which restricts its applicability in surgical procedures across the world in the near future. To mitigate the above-mentioned issues, in this paper, we propose an approach named AaYusH (Ethereum smart contract (ESC) and IPFS-based TS system). The security and privacy issues in AaYusH can be resolved through ESC, whereas storage cost issues with the InterPlanetary File System (IPFS) protocol. Moreover, we present a real-time SC written in Solidity and deployed in Truffle suite. We test the security bugs of AaYusH in MyThril open-source tool and detect no issues. Finally, we evaluate the performance of AaYusH in context to latency and data storage cost, and it outperforms as compared to the traditional telesurgery system.","2474-9133","978-1-7281-7440-2","10.1109/ICCWorkshops49005.2020.9145044","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9145044","Telesurgery;Blockchain;Smart Contract;Ethereum;Solidity;Healthcare;Latency","Surgery;Contracts;Security;Real-time systems;Hospitals;Reliability","5G mobile communication;cloud computing;contracts;control engineering computing;cryptography;data privacy;health care;Internet of Things;medical robotics;program debugging;public domain software;surgery;telemedicine","AaYusH;latency data storage cost;smart contract-based telesurgery System;Healthcare 4.0;5G-enabled Tactile Internet;blockchain storage cost issues;privacy issues;InterPlanetary File System protocol;security bugs;ultra-responsive surgical services;TI;Ethereum smart contract;ESC;IPFS-based TS system;MyThril open-source tool;Solidity;Truffle suite;cloud server;surgical robots","","8","","23","","21 Jul 2020","","","IEEE","IEEE Conferences"
"MPro: Combining Static and Symbolic Analysis for Scalable Testing of Smart Contract","W. Zhang; S. Banescu; L. Pasos; S. Stewart; V. Ganesh",University of Waterloo; Quantstamp Inc.; Quantstamp Inc.; Quantstamp Inc.; University of Waterloo,"2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE)","10 Feb 2020","2019","","","456","462","Smart contracts are executable programs that enable the building of a programmable trust mechanism between multiple entities without the need of a trusted third-party. At the time of this writing, there were over 10 million smart contracts deployed on the Ethereum networks and this number continues to grow at a rapid pace. Smart contracts are often written in a Turing-complete programming language called Solidity, which is not easy to audit for subtle errors. Further, since smart contracts are immutable, errors have led to attacks resulting in losses of cryptocurrency worth 100s of millions of USD and reputational damage. Unfortunately, manual security analyses do not scale with size and number of smart contracts. Automated and scalable mechanisms are essential if smart contracts are to gain mainstream acceptance. Researchers have developed several security scanners in the past couple of years. However, many of these analyzer either do not scale well, or if they do, produce many false positives. This issue is exacerbated when bugs are triggered only after a series of interactions with the functions of the contract-under-test. A depth-n vulnerability, refers to a vulnerability that requires invoking a specific sequence of n functions to trigger. Depth-n vulnerabilities are time-consuming to detect by existing automated analyzers, because of the combinatorial explosion of sequences of functions that could be executed on smart contracts. In this paper, we present a technique to analyze depth-n vulnerabilities in an efficient and scalable way by combining symbolic execution and data dependency analysis. A significant advantage of combining symbolic with static analysis is that it scales much better than symbolic alone and does not have the problem of false positive that static analysis tools typically have. We have implemented our technique in a tool called MPro, a scalable and automated smart contract analyzer based on the existing symbolic analysis tool Mythril-Classic and the static analysis tool Slither. We analyzed 100 randomly chosen smart contracts on MPro and our evaluation shows that MPro is about n-times faster than Mythril-Classic for detecting depth-n vulnerabilities, while preserving all the detection capabilities of Mythril-Classic.","2332-6549","978-1-7281-4982-0","10.1109/ISSRE.2019.00052","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8987460","Blockchain;Smart Contract;Symbolic Execution;Static Analysis","","contracts;cryptocurrencies;program diagnostics;program testing;program verification;symbol manipulation;Turing machines","Slither tool;Mythril-Classic tool;symbolic execution;data dependency analysis;depth-n vulnerability;contract-under-test;cryptocurrency;Solidity;Turing-complete programming language;Ethereum networks;trusted third-party;programmable trust mechanism;executable programs;scalable testing;symbolic analysis;static analysis;MPro;automated smart contract analyzer;scalable contract analyzer","","1","","18","","10 Feb 2020","","","IEEE","IEEE Conferences"
"SPrune: A Code Pruning Tool for Ethereum Solidity Contract Static Analysis","Z. Zhou; Y. Xiong; W. Huang; L. Ma","University of Science and Technology of China,School of Computer Science and Technology,Hefei,PR China; University of Science and Technology of China,School of Computer Science and Technology,Hefei,PR China; University of Science and Technology of China,School of Computer Science and Technology,Hefei,PR China; Beijing Institute of Remote Sensing,Beijing,China,122000","2020 6th International Conference on Big Data Computing and Communications (BIGCOM)","6 Aug 2020","2020","","","66","70","Ethereum is a cryptographic currency system built on top of blockchain. It allows anyone to write smart contracts in high-level programming languages, solidity is the most popular and mature one. In the last few years, the use of smart contracts across domains has increased a lot, security analysis to detect the potential issues in contracts thus becomes crucial. Theorem proving is a formal method technique which mathematically prove the correctness of a design with respect to a mathematical formal specification, that can be applied to smart contracts’ secure analysis. The successful implementation of a deduction calculs of theorem proving in an automated reasoning program requires the integration of search strategies that reduce the search space by pruning unnecessary deduction paths.This paper desribes SPrune, a code pruning tool designed to simplify static analysis for solidity contracts. It works by unfolding derived contracts based on the inheritance between contracts in one smart contract, and execute code pruning on the unfolded contract. Our tool allows for the application of static code pruning and provides facility for solidity contract developers and testers to trace and localize bugs in contracts.","","978-1-7281-8275-9","10.1109/BigCom51056.2020.00015","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9160448","Ethereum;Solidity;smart contracts;static analysis","Contracts;Tools;Libraries;Computer languages;Mathematical model;Syntactics","contracts;cryptocurrencies;distributed databases;formal specification;formal verification;inference mechanisms;program debugging;program diagnostics;program testing;source code (software);theorem proving","static code pruning;solidity contract developers;SPrune;code pruning tool;cryptographic currency system;high-level programming languages;security analysis;theorem proving;formal method technique;mathematical formal specification;smart contracts;Ethereum solidity contract static analysis;blockchain;automated reasoning program","","","","14","","6 Aug 2020","","","IEEE","IEEE Conferences"
"Self-Adaptive Security for SLA Based Smart Contract","I. Singh; S. -W. Lee","Ajou University,Dept. of Computer Engineering,Suwon,Republic of Korea; Ajou University,Dept. of Artificial Intelligence Dept. of Software and Computer Engineering,Suwon,Republic of Korea","2021 IEEE 29th International Requirements Engineering Conference Workshops (REW)","27 Oct 2021","2021","","","388","393","The current smart contracts development practices do not follow a standard security development process to understand and explore the security vulnerabilities and attacks in smart contracts. We propose a self-adaptive security modeling approach for modeling and analyzing Service Level Agreement (SLA) based smart contracts using attack scenarios and goal models. There are many security vulnerabilities and bugs in the smart contract due to inconsistencies in the design of smart contracts. The objective of the proposed research is to help the smart contract security requirements designers and developers to understand the security vulnerabilities, concerns, and to propose a self-adaptive security approach to provide countermeasures to detect and mitigate these attacks in the SLA smart contract in the domain of Blockchain-Based Cloud (BBC).","","978-1-6654-1898-0","10.1109/REW53955.2021.00069","National Research Foundation; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9582302","Smart Contract;Self-Adaptive Security;Service Level Agreement;Blockchain;Cloud","Analytical models;Conferences;Smart contracts;Computer bugs;Security;Requirements engineering;Standards","","","","","","15","","27 Oct 2021","","","IEEE","IEEE Conferences"
"Checking Smart Contracts with Structural Code Embedding","Z. Gao; L. Jiang; X. Xia; D. Lo; J. Grundy","Faculty of Information Technology, Monash University Faculty of Information Technology, 224480 Clayton, Victoria Australia (e-mail: zhipeng.gao@monash.edu); School of Information Systems, Singapore Management University, Singapore, Singapore Singapore 178902 (e-mail: lxjiang@smu.edu.sg); Faculty of Information Technology, Monash University Faculty of Information Technology, 224480 Clayton, Victoria Australia 3800 (e-mail: xxia@zju.edu.cn); School of Information Systems, Singapore Management University, Singapore, Singapore Singapore 17890 (e-mail: davidlo@smu.edu.sg); Faculty of IT, Monash University, Clayton, Victoria Australia 3800 (e-mail: john.grundy@monash.edu)","IEEE Transactions on Software Engineering","","2020","PP","99","1","1","Smart contracts have been increasingly used together with blockchains to automate financial and business transactions. However, many bugs and vulnerabilities have been identified in many contracts which raises serious concerns about smart contract security, not to mention that the blockchain systems on which the smart contracts are built can be buggy. Thus, there is a significant need to better maintain smart contract code and ensure its high reliability. In this paper, we propose an automated approach to learn characteristics of smart contracts in Solidity, useful for repetitive contract code, bug detection and contract validation. Our new approach is based on word embeddings and vector space comparison. We parse smart contract code into word streams with code structural information, convert code elements (e.g., statements, functions) into numerical vectors that are supposed to encode the code syntax and semantics, and compare the similarities among the vectors encoding code and known bugs, to identify potential issues. We have implemented the approach in a prototype, named SmartEmbed, and evaluated it with more than 22,000 smart contracts collected from the Ethereum blockchain. Results show that our tool can effectively identify many repetitive instances of Solidity code, where the clone ratio is around 90%. Code clones such as type-III or even type-IV semantic clones can also be detected. Our tool can identify more than 500 clone related bugs based on our bug databases efficiently and accurately. Our tool can also help to efficiently validate any given smart contract against the known set of bugs, which can help to improve the users' confidence in the reliability of the contract.","1939-3520","","10.1109/TSE.2020.2971482","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8979435","","Computer bugs;Smart contracts;Cloning;Tools;Blockchain;Security","","","","5","","","IEEE","3 Feb 2020","","","IEEE","IEEE Early Access Articles"
"DeeSCVHunter: A Deep Learning-Based Framework for Smart Contract Vulnerability Detection","X. Yu; H. Zhao; B. Hou; Z. Ying; B. Wu","Institute of Information Engineering, Chinese Academy of Sciences,State Key Laboratory of Information Security,Beijing,China; Institute of Information Engineering, Chinese Academy of Sciences,State Key Laboratory of Information Security,Beijing,China; Institute of Information Engineering, Chinese Academy of Sciences,State Key Laboratory of Information Security,Beijing,China; Institute of Information Engineering, Chinese Academy of Sciences,State Key Laboratory of Information Security,Beijing,China; Institute of Information Engineering, Chinese Academy of Sciences,State Key Laboratory of Information Security,Beijing,China","2021 International Joint Conference on Neural Networks (IJCNN)","21 Sep 2021","2021","","","1","8","Security attacks in smart contracts have drawn extensive attention due to the financial loss and erosion of trust caused by vulnerabilities. Even worse, smart contract is a tamper proof digital agreement and fixing bugs in it is difficult, so it is necessary for developers to detect security vulnerabilities in smart contract before deployment. Researchers have proposed several methods on smart contract vulnerability detection. However, despite the numerous vulnerability-finding tools, few of them have ideal detection performance because most of them rely on fixed rules, which is inefficient. In this paper, a modularized and systematic Deep Learning-based framework is proposed to automatically detect smart contracts vulnerability, called DeeSCVHunter. Particularly, we focus on two types of smart contract vulnerabilities: reentrancy and time dependence. And we propose a novel notion of Vulnerability Candidate Slice (VCS) to help models capture the key point of vulnerability. We conduct experiments on real-world dataset and the results prove the effectiveness of VCS, which leads to 25.76% improvement in F1-score at most. And extensive experiments also show that our proposed framework significantly outperforms state-of-the-art methods.","2161-4407","978-1-6654-3900-8","10.1109/IJCNN52387.2021.9534324","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9534324","","Systematics;Smart contracts;Semantics;Neural networks;Computer bugs;Tools;Data models","","","","","","35","","21 Sep 2021","","","IEEE","IEEE Conferences"
"A Practical, Principled Measure of Fuzzer Appeal: A Preliminary Study","M. Gavrilov; K. Dewey; A. Groce; D. Zamanzadeh; B. Hardekopf","NA; California State University, Northridge,Northridge,CA,USA; Northern Arizona University,Flagstaff,AZ,USA; University of California, Los Angeles,Los Angeles,CA,USA; University of California, Santa Barbara,Santa Barbara,CA,USA","2020 IEEE 20th International Conference on Software Quality, Reliability and Security (QRS)","11 Dec 2020","2020","","","510","517","Fuzzers are important bug-finding tools in both academia and industry. To ensure scientific progress, we need a metric for fuzzer comparison. Bug-based metrics are impractical because (1) the definition of ""bug"" is vague, and (2) mapping bug-revealing inputs to bugs requires extensive domain knowledge.In this paper, we propose an automated method for comparing fuzzers that alleviates these problems. We replace the question ""What bugs can this fuzzer find?"" with ""What changes in program behavior over time can this fuzzer detect?"". Intuitively, fuzzers which find more behavioral changes are likely to find more bugs. However, unlike bugs, behavioral changes are well-defined and readily detectable. Our evaluation, executed on three targets with several fuzzers, shows that our method is consistent with bug-based metrics, but without associated difficulties. While further evaluation is needed to establish superiority, our results show that our method warrants further investigation.","","978-1-7281-8913-0","10.1109/QRS51102.2020.00071","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9282794","fuzzing;evaluation methodology;evaluation metrics","Measurement;Computer bugs;Smart contracts;Software quality;Tools;Software reliability;Security","program debugging;program testing","practical measure;principled measure;bug-finding tools;fuzzer comparison;bug-based metrics;behavioral changes","","","","37","","11 Dec 2020","","","IEEE","IEEE Conferences"
"EVM<sup>*</sup>: From Offline Detection to Online Reinforcement for Ethereum Virtual Machine","F. Ma; Y. Fu; M. Ren; M. Wang; Y. Jiang; K. Zhang; H. Li; X. Shi","Beijing University of Posts and Telecommunications, China; Tsinghua University, China; Sun Yat-sen University, China; Tsinghua University, China; Tsinghua University, China; WeBank, China; WeBank, China; WeBank, China","2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)","18 Mar 2019","2019","","","554","558","Attacks on transactions of Ethereum could be dangerous because they could lead to a big loss of money. There are many tools detecting vulnerabilities in smart contracts trying to avoid potential attacks. However, we found that there are still many missed vulnerabilities in contracts. Motivated by this, we propose a methodology to reinforce EVM to stop dangerous transactions in real time even when the smart contract contains vulnerabilities. Basically, the methodology consists of three steps: monitoring strategy definition, opcode-structure maintenance and EVM instrumentation. Monitoring strategy definition refers to the specific rule to test whether there is a dangerous operation during transaction execution. Opcode-structure maintenance is to maintain a structure to store the rule related opcodes and analyze it before an operation execution. EVM instrumentation inserts the monitoring strategy, interrupting mechanism and the opcode-structure operations in EVM source code. For evaluation, we implement EVM<sup>*</sup> on js-evm, a widely-used EVM platform written in javascript. We collect 10 contracts online with known bugs and use each contract to execute a dangerous transaction, all of them have been interrupted by our reinforced EVM<sup>*</sup>, while the original EVM permits all attack transactions. For the time overhead, the reinforced EVM<sup>*</sup> is slower than the original one by 20-30%, which is tolerable for the financial critical applications.","1534-5351","978-1-7281-0591-8","10.1109/SANER.2019.8668038","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8668038","Blockchain security;Ethereum;EVM defending","Monitoring;Computer bugs;Tools;Instruments;Smart contracts;Maintenance engineering","financial data processing;security of data;virtual machines","offline detection;vulnerabilities;smart contract;opcode-structure maintenance;EVM instrumentation;transaction execution;rule related opcodes;operation execution;opcode-structure operations;EVM source code;js-evm;EVM platform;Ethereum virtual machine;interrupting mechanism","","7","","16","","18 Mar 2019","","","IEEE","IEEE Conferences"
