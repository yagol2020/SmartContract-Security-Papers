@inproceedings{10.1145/3238147.3238177,
author = {Jiang, Bo and Liu, Ye and Chan, W. K.},
title = {ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection},
year = {2018},
isbn = {9781450359375},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3238147.3238177},
doi = {10.1145/3238147.3238177},
abstract = {Decentralized cryptocurrencies feature the use of blockchain to transfer values among peers on networks without central agency. Smart contracts are programs running on top of the blockchain consensus protocol to enable people make agreements while minimizing trusts. Millions of smart contracts have been deployed in various decentralized applications. The security vulnerabilities within those smart contracts pose significant threats to their applications. Indeed, many critical security vulnerabilities within smart contracts on Ethereum platform have caused huge financial losses to their users. In this work, we present ContractFuzzer, a novel fuzzer to test Ethereum smart contracts for security vulnerabilities. ContractFuzzer generates fuzzing inputs based on the ABI specifications of smart contracts, defines test oracles to detect security vulnerabilities, instruments the EVM to log smart contracts runtime behaviors, and analyzes these logs to report security vulnerabilities. Our fuzzing of 6991 smart contracts has flagged more than 459 vulnerabilities with high precision. In particular, our fuzzing tool successfully detects the vulnerability of the DAO contract that leads to USD 60 million loss and the vulnerabilities of Parity Wallet that have led to the loss of USD 30 million and the freezing of USD 150 million worth of Ether.},
booktitle = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
pages = {259–269},
numpages = {11},
keywords = {Vulnerability, Blockchain, Fuzzer, Ethereum, Fuzzing, Smart contract, Test oracle},
location = {Montpellier, France},
series = {ASE 2018}
}

@inproceedings{10.1145/3368089.3417064,
author = {W\"{u}stholz, Valentin and Christakis, Maria},
title = {Harvey: A Greybox Fuzzer for Smart Contracts},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3417064},
doi = {10.1145/3368089.3417064},
abstract = {We present Harvey, an industrial greybox fuzzer for smart contracts, which are programs managing accounts on a blockchain.  Greybox fuzzing is a lightweight test-generation approach that effectively detects bugs and security vulnerabilities. However, greybox fuzzers randomly mutate program inputs to exercise new paths; this makes it challenging to cover code that is guarded by narrow checks. Moreover, most real-world smart contracts transition through many different states during their lifetime, e.g., for every bid in an auction. To explore these states and thereby detect deep vulnerabilities, a greybox fuzzer would need to generate sequences of contract transactions, e.g., by creating bids from multiple users, while keeping the search space and test suite tractable.  In this paper, we explain how Harvey alleviates both challenges with two key techniques. First, Harvey extends standard greybox fuzzing with a method for predicting new inputs that are more likely to cover new paths or reveal vulnerabilities in smart contracts. Second, it fuzzes transaction sequences in a targeted and demand-driven way. We have evaluated our approach on 27 real-world contracts. Our experiments show that our techniques significantly increase Harvey's effectiveness in achieving high coverage and detecting vulnerabilities, in most cases orders-of-magnitude faster.},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1398–1409},
numpages = {12},
keywords = {smart contracts, greybox fuzzing, automated testing},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}

@inproceedings{10.1145/3457913.3457920,
author = {Huang, Yuhe and Jiang, Bo and Chan, W. K.},
title = {EOSFuzzer: Fuzzing EOSIO Smart Contracts for Vulnerability Detection},
year = {2020},
isbn = {9781450388191},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3457913.3457920},
doi = {10.1145/3457913.3457920},
abstract = {EOSIO is one typical public blockchain platform. It is scalable in terms of transaction speeds and has a growing ecosystem supporting smart contracts and decentralized applications. However, the vulnerabilities within the EOSIO smart contracts have led to serious attacks, which caused serious financial loss to its end users. In this work, we systematically analyzed three typical EOSIO smart contract vulnerabilities and their related attacks. Then we presented EOSFuzzer, a general black-box fuzzing framework to detect vulnerabilities within EOSIO smart contracts. In particular, EOSFuzzer proposed effective attacking scenarios and test oracles for EOSIO smart contract fuzzing. Our fuzzing experiment on 3963 EOSIO smart contracts shows that EOSFuzzer is both effective and efficient to detect EOSIO smart contract vulnerabilities with high accuracy.},
booktitle = {12th Asia-Pacific Symposium on Internetware},
pages = {99–109},
numpages = {11},
keywords = {Vulnerability detection, Smart contract, Blockchain, Fuzzing},
location = {Singapore, Singapore},
series = {Internetware'20}
}

@inproceedings{10.1145/3468264.3473929,
author = {Ren, Meng and Ma, Fuchen and Yin, Zijing and Fu, Ying and Li, Huizhong and Chang, Wanli and Jiang, Yu},
title = {Making Smart Contract Development More Secure and Easier},
year = {2021},
isbn = {9781450385626},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468264.3473929},
doi = {10.1145/3468264.3473929},
abstract = {With the rapid development of distributed applications, smart contracts have attracted more and more developers' attentions. However, developers or domain experts have different levels of familiarity with specific programming languages, like Solidity, and those vulnerabilities hidden in the code would be exploited and result in huge property losses. Existing auxiliary tools lack security considerations. Most of them only provide word completion based on fuzzy search and detection services for limited types of vulnerabilities, which results in the manpower waste during coding and potential vulnerability threats after deployment.  In this work, we propose an integrated framework to enhance security in the two stages of recommendation and validation, assisting developers to implement more secure contracts more quickly. First, we reinforce original smart contracts with general patch patterns and secure programming standards for training, and design a real-time code suggestion algorithm to predict secure words for selection. Then, we integrate multiple widely-used testing tools to provide validation services. For evaluation, we collected 47,398 real-world contracts, and the result shows that it outperforms existing platforms and tools, improving the average word suggestion accuracy by 30%-60% and helping detect about 25%-61% more vulnerabilities. In most cases, our framework can correctly predict next words with the probability up to 82%-97% within top ten candidates. Compared with professional vulnerability mining tools, it can find more vulnerabilities and provide targeted modification suggestions without frivolous configurations. Currently, this framework has been used as the official development tool of WeBank and integrated as the recommended platform by FISCO-BCOS community.},
booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1360–1370},
numpages = {11},
keywords = {Domain-specific Reinforcement, Integrated Testing, Smart Contract Development},
location = {Athens, Greece},
series = {ESEC/FSE 2021}
}

@inproceedings{10.1145/3437992.3439934,
author = {Annenkov, Danil and Milo, Mikkel and Nielsen, Jakob Botsch and Spitters, Bas},
title = {Extracting Smart Contracts Tested and Verified in Coq},
year = {2021},
isbn = {9781450382991},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3437992.3439934},
doi = {10.1145/3437992.3439934},
abstract = {We implement extraction of Coq programs to functional languages based on MetaCoq's certified erasure. As part of this, we implement an optimisation pass removing unused arguments. We prove the pass correct wrt. a conventional call-by-value operational semantics of functional languages. We apply this to two functional smart contract languages, Liquidity and Midlang, and to the functional language Elm.  Our development is done in the context of the ConCert framework that enables smart contract verification. We contribute a verified boardroom voting smart contract featuring maximum voter privacy such that each vote is kept private except under collusion of all other parties.  We also integrate property-based testing into ConCert using QuickChick and our development is the first to support testing properties of interacting smart contracts. We test several complex contracts such as a DAO-like contract, an escrow contract, an implementation of a Decentralized Finance (DeFi) contract which includes a custom token standard (Tezos FA2), and more.  In total, this gives us a way to write dependent programs in Coq, test them semi-automatically, verify, and then extract to functional smart contract languages, while retaining a small trusted computing base of only MetaCoq and the pretty-printers into these languages.},
booktitle = {Proceedings of the 10th ACM SIGPLAN International Conference on Certified Programs and Proofs},
pages = {105–121},
numpages = {17},
keywords = {proof assistants, property-based testing, Coq, software correctness, blockchain, smart contracts, certified programming, code extraction, formal verification},
location = {Virtual, Denmark},
series = {CPP 2021}
}

@inproceedings{10.1145/3297280.3297321,
author = {di Angelo, Monika and Soare, Alfred and Salzer, Gernot},
title = {Smart Contracts in View of the Civil Code},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3297321},
doi = {10.1145/3297280.3297321},
abstract = {Explicit legal regulation is still lacking in many countries for cryptocurrencies like Bitcoin, Ripple, Ethereum, and others. This is not unusual for a new technology. On top of such cryptocurrencies, another new technology, so-called smart contracts, has been established. Smart contracts are specialized computer code with the aim to automate the exchange of (digital) assets. In decentralized applications (\DH{}apps), parts of the business logic and the data storage of traditional web applications are replaced with smart contracts. They are credited with considerable potential for commercial use, especially in FinTech but also beyond. Smart contracts mostly lack explicit legal regulation as well. Hitherto there is little experience in applying current law to them. Building a business on uncertain terrain is at least risky. We seek a clarification of smart contracts in the legal context, especially against the background of the Civil Code.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {392–399},
numpages = {8},
keywords = {legal validity, civil code, civil contract, smart contract, legal aspects},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@inproceedings{10.1145/3395363.3404366,
author = {Grieco, Gustavo and Song, Will and Cygan, Artur and Feist, Josselin and Groce, Alex},
title = {Echidna: Effective, Usable, and Fast Fuzzing for Smart Contracts},
year = {2020},
isbn = {9781450380089},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3395363.3404366},
doi = {10.1145/3395363.3404366},
abstract = {Ethereum smart contracts---autonomous programs that run on a blockchain---often control transactions of financial and intellectual property. Because of the critical role they play, smart contracts need complete, comprehensive, and effective test generation. This paper introduces an open-source smart contract fuzzer called Echidna that makes it easy to automatically generate tests to detect violations in assertions and custom properties. Echidna is easy to install and does not require a complex configuration or deployment of contracts to a local blockchain. It offers responsive feedback, captures many property violations, and its default settings are calibrated based on experimental data. To date, Echidna has been used in more than 10 large paid security audits, and feedback from those audits has driven the features and user experience of Echidna, both in terms of practical usability (e.g., smart contract frameworks like Truffle and Embark) and test generation strategies. Echidna aims to be good at finding real bugs in smart contracts, with minimal user effort and maximal speed.},
booktitle = {Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {557–560},
numpages = {4},
keywords = {test generation, smart contracts, fuzzing},
location = {Virtual Event, USA},
series = {ISSTA 2020}
}

@inproceedings{10.1145/3368089.3417939,
author = {Liu, Ye and Li, Yi and Lin, Shang-Wei and Yan, Qiang},
title = {ModCon: A Model-Based Testing Platform for Smart Contracts},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3417939},
doi = {10.1145/3368089.3417939},
abstract = {Unlike those on public permissionless blockchains, smart contracts on enterprise permissioned blockchains are not limited by resource constraints, and therefore often larger and more complex. Current testing and analysis tools lack support for such contracts, which demonstrate stateful behaviors and require special treatment in quality assurance. In this paper, we present a model-based testing platform, called ModCon, relying on user-specified models to define test oracles, guide test generation, and measure test adequacy. ModCon is Web-based and supports both permissionless and permissioned blockchain platforms. We demonstrate the usage and key features of ModCon on real enterprise smart contract applications.},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1601–1605},
numpages = {5},
keywords = {blockchain, Smart contract, model-based testing},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}

@inproceedings{10.1145/3463274.3463351,
author = {Ding, Mengjie and Li, Peiru and Li, Shanshan and Zhang, He},
title = {HFContractFuzzer: Fuzzing Hyperledger Fabric Smart Contracts for Vulnerability Detection},
year = {2021},
isbn = {9781450390538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3463274.3463351},
doi = {10.1145/3463274.3463351},
abstract = { With its unique advantages such as decentralization and immutability, blockchain technology has been widely used in various fields in recent years. The smart contract running on the blockchain is also playing an increasingly important role in decentralized application scenarios. Therefore, the automatic detection of security vulnerabilities in smart contracts has become an urgent problem in the application of blockchain technology. Hyperledger Fabric is a smart contract platform based on enterprise-level licensed distributed ledger technology. However, the research on the vulnerability detection technology of Hyperledger Fabric smart contracts is still in its infancy. In this paper, we propose HFContractFuzzer, a method based on Fuzzing technology to detect Hyperledger Fabric smart contracts, which combines a Fuzzing tool for golang named go-fuzz and smart contracts written by golang. We use HFContractFuzzer to detect vulnerabilities in five contracts from typical sources and discover that four of them have security vulnerabilities, proving the effectiveness of the proposed method.},
booktitle = {Evaluation and Assessment in Software Engineering},
pages = {321–328},
numpages = {8},
keywords = {Blockchain, Hyperledger Fabric, Fuzzing, Smart Contract, Security Vulnerability},
location = {Trondheim, Norway},
series = {EASE 2021}
}

@inproceedings{10.1145/3485832.3488015,
author = {Li, Zecheng and Zhou, Yu and Guo, Songtao and Xiao, Bin},
title = {SolSaviour: A Defending Framework for Deployed Defective Smart Contracts},
year = {2021},
isbn = {9781450385794},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3485832.3488015},
doi = {10.1145/3485832.3488015},
abstract = { A smart contract cannot be modified once deployed. Bugs in deployed smart contracts may cause devastating consequences. For example, the infamous reentrancy bug in the DAO contract allows attackers to arbitrarily withdraw ethers, which caused millions of dollars loss. Currently, the main countermeasure against contract bugs is to thoroughly detect and verify contracts before deployment, which, however, cannot defend against unknown bugs. These detection methods also suffer from possible false negative results. In this paper, we propose SolSaviour, a framework for repairing and recovering deployed defective smart contracts by redeploying patched contracts and migrating old contracts’ internal states to the new ones. SolSaviour consists of a voteDestruct mechanism and a TEE cluster. The voteDestruct mechanism allows contract stake holders to decide whether to destroy the defective contract and withdraw inside assets. The TEE cluster is responsible for asset escrow, redeployment of patched contracts, and state migration. Our experiment results show that SolSaviour can successfully repair vulnerabilities, reduce asset losses, and recover all defective contracts. To the best of our knowledge, we are the first to propose a defending mechanism for repairing and recovering deployed defective smart contracts.},
booktitle = {Annual Computer Security Applications Conference},
pages = {748–760},
numpages = {13},
keywords = {defence mechanism, blockchain, trusted execution environment (TEE), smart contract},
location = {Virtual Event, USA},
series = {ACSAC}
}

@inproceedings{10.1145/3377644.3377650,
author = {Lai, Enmei and Luo, Wenjun},
title = {Static Analysis of Integer Overflow of Smart Contracts in Ethereum},
year = {2020},
isbn = {9781450377447},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377644.3377650},
doi = {10.1145/3377644.3377650},
abstract = {In recent years, vulnerabilities of smart contracts have frequently break out. In particular, integer overflow of smart contracts, a high-risk vulnerability, has caused huge financial losses. However, most tools currently fail to detect integer overflow in smart contracts. In this paper, we summarize 11 types of integer overflow features for Solidity smart contracts in Ethereum and abstractly define 83 corresponding XPath patterns. And we design an extensible static analysis tool to detect common integer overflow vulnerabilities of Solidity smart contracts in Ethereum through the defined XPath patterns. To evaluate our tool, we tested 7,000 verified Solidity smart contracts and found that there were 430 smart contracts with vulnerabilities of integer overflow. Experimental results show that there are still high-risk vulnerabilities of integer overflow in verified smart contracts.},
booktitle = {Proceedings of the 2020 4th International Conference on Cryptography, Security and Privacy},
pages = {110–115},
numpages = {6},
keywords = {smart contract, integer overflow, vulnerability detection, XPath},
location = {Nanjing, China},
series = {ICCSP 2020}
}

@inproceedings{10.1145/3460319.3469076,
author = {Groce, Alex and Grieco, Gustavo},
title = {Echidna-Parade: A Tool for Diverse Multicore Smart Contract Fuzzing},
year = {2021},
isbn = {9781450384599},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3460319.3469076},
doi = {10.1145/3460319.3469076},
abstract = {Echidna is a widely used fuzzer for Ethereum Virtual Machine (EVM) compatible blockchain smart contracts that generates transaction sequences of calls to smart contracts. While Echidna is an essentially single-threaded tool, it is possible for multiple Echidna processes to communicate by use of a shared transaction sequence corpus. Echidna provides a very large variety of configuration options, since each smart contract may be best-tested by a non-default configuration, and different faults or coverage targets within a single contract may also have differing ideal configurations. This paper presents echidna-parade, a tool that provides pushbutton multicore fuzzing using Echidna as an underlying fuzzing engine, and automatically provides sophisticated diversification of configurations. Even without using multiple cores, echidna-parade can improve the effectiveness of fuzzing with Echidna, due to the advantages provided by multiple types of test configuration diversity. Using echidna-parade with multiple cores can produce significantly better results than Echidna, in less time.},
booktitle = {Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {658–661},
numpages = {4},
keywords = {fuzzing, test diversity, smart contracts, swarm testing, test length},
location = {Virtual, Denmark},
series = {ISSTA 2021}
}

@inproceedings{10.1145/3238147.3240728,
author = {Liu, Han and Liu, Chao and Zhao, Wenqi and Jiang, Yu and Sun, Jiaguang},
title = {S-Gram: Towards Semantic-Aware Security Auditing for Ethereum Smart Contracts},
year = {2018},
isbn = {9781450359375},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3238147.3240728},
doi = {10.1145/3238147.3240728},
abstract = {Smart contracts, as a promising and powerful application on the Ethereum blockchain, have been growing rapidly in the past few years. Since they are highly vulnerable to different forms of attacks, their security becomes a top priority. However, existing security auditing techniques are either limited in fnding vulnerabilities (rely on pre-defned bug paterns) or very expensive (rely on program analysis), thus are insufcient for Ethereum.  To mitigate these limitations, we proposed a novel semanticaware security auditing technique called S-gram for Ethereum. The key insight is a combination of N-gram language modeling and lightweight static semantic labeling, which can learn statistical regularities of contract tokens and capture high-level semantics as well (e.g., flow sensitivity of a transaction). S-gram can be used to predict potential vulnerabilities by identifying irregular token sequences and optimize existing in-depth analyzers (e.g., symbolic execution engines, fuzzers etc.). We have implemented S-gram for Solidity smart contracts in Ethereum. The evaluation demonstrated the potential of S-gram in identifying possible security issues.},
booktitle = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
pages = {814–819},
numpages = {6},
keywords = {{Smart contracts, static semantic labeling, security auditing, language modeling},
location = {Montpellier, France},
series = {ASE 2018}
}

@inproceedings{10.1145/3460319.3469078,
author = {Ren, Meng and Ma, Fuchen and Yin, Zijing and Li, Huizhong and Fu, Ying and Chen, Ting and Jiang, Yu},
title = {SCStudio: A Secure and Efficient Integrated Development Environment for Smart Contracts},
year = {2021},
isbn = {9781450384599},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3460319.3469078},
doi = {10.1145/3460319.3469078},
abstract = {With the increasing popularity of block-chain technologies, more and more engineers use smart contracts for application implementation. Traditional supporting tools can either provide code completions based on static libraries or detect a limited set of vulnerabilities, which results in the manpower waste during coding and miss-detection of bugs. In this work, we propose SCStudio, a unified smart contract development platform, which aims to help developers implement more secure smart contracts easily. The core idea is to realize real-time security-reinforced recommendation through pattern-based learning; and to perform security-oriented validation via integrated testing. SCStudio was implemented as a plug-in of VS Code. It has been used as the official development tool of WeBank and integrated as the recommended development tool by FISCO-BCOS community. In practice, it outperforms existing contract development environments, such as Remix, improving the average word suggestion accuracy by 30%-60% and helping detect about 25% more vulnerabilities.  The video is presented at https://youtu.be/l6hW3Ds5Tkg.},
booktitle = {Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {666–669},
numpages = {4},
keywords = {Security-Reinforced Code Suggestion, Validation, Smart Contract},
location = {Virtual, Denmark},
series = {ISSTA 2021}
}

@inproceedings{10.1145/3377811.3380364,
author = {Durieux, Thomas and Ferreira, Jo\~{a}o F. and Abreu, Rui and Cruz, Pedro},
title = {Empirical Review of Automated Analysis Tools on 47,587 Ethereum Smart Contracts},
year = {2020},
isbn = {9781450371216},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377811.3380364},
doi = {10.1145/3377811.3380364},
abstract = {Over the last few years, there has been substantial research on automated analysis, testing, and debugging of Ethereum smart contracts. However, it is not trivial to compare and reproduce that research. To address this, we present an empirical evaluation of 9 state-of-the-art automated analysis tools using two new datasets: i) a dataset of 69 annotated vulnerable smart contracts that can be used to evaluate the precision of analysis tools; and ii) a dataset with all the smart contracts in the Ethereum Blockchain that have Solidity source code available on Etherscan (a total of 47,518 contracts). The datasets are part of SmartBugs, a new extendable execution framework that we created to facilitate the integration and comparison between multiple analysis tools and the analysis of Ethereum smart contracts. We used SmartBugs to execute the 9 automated analysis tools on the two datasets. In total, we ran 428,337 analyses that took approximately 564 days and 3 hours, being the largest experimental setup to date both in the number of tools and in execution time. We found that only 42% of the vulnerabilities from our annotated dataset are detected by all the tools, with the tool Mythril having the higher accuracy (27%). When considering the largest dataset, we observed that 97% of contracts are tagged as vulnerable, thus suggesting a considerable number of false positives. Indeed, only a small number of vulnerabilities (and of only two categories) were detected simultaneously by four or more tools.},
booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
pages = {530–541},
numpages = {12},
keywords = {solidity, debugging, tools, blockchain, Ethereum, smart contracts, reproducible bugs, testing},
location = {Seoul, South Korea},
series = {ICSE '20}
}

@inproceedings{10.1145/3460319.3464837,
author = {Ren, Meng and Yin, Zijing and Ma, Fuchen and Xu, Zhenyang and Jiang, Yu and Sun, Chengnian and Li, Huizhong and Cai, Yan},
title = {Empirical Evaluation of Smart Contract Testing: What is the Best Choice?},
year = {2021},
isbn = {9781450384599},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3460319.3464837},
doi = {10.1145/3460319.3464837},
abstract = {Security of smart contracts has attracted increasing attention in recent years. Many researchers have devoted themselves to devising testing tools for vulnerability detection. Each published tool has demonstrated its effectiveness through a series of evaluations on their own experimental scenarios. However, the inconsistency of evaluation settings such as different data sets or performance metrics, may result in biased conclusion.  In this paper, based on an empirical evaluation of widely used smart contract testing tools, we propose a unified standard to eliminate the bias in the assessment process. First, we collect 46,186 source-available smart contracts from four influential organizations. This comprehensive dataset is open to the public and involves different code characteristics, vulnerability patterns and application scenarios. Then we propose a 4-step evaluation process and summarize the difference among relevant work in these steps. We use nine representative tools to carry out extensive experiments. The results demonstrate that different choices of experimental settings could significantly affect tool performance and lead to misleading or even opposite conclusions. Finally, we generalize some problems of existing testing tools, and propose some possible directions for further improvement.},
booktitle = {Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {566–579},
numpages = {14},
keywords = {smart contract testing, observations and solutions, evaluation},
location = {Virtual, Denmark},
series = {ISSTA 2021}
}

@inproceedings{10.1145/3330204.3330225,
author = {Medeiros, Hallan and Vilain, Patr\'{\i}cia and Pereira, Vilmar C\'{e}sar},
title = {Reducing the Execution Time of Unit Tests of Smart Contracts in Blockchain Platforms},
year = {2019},
isbn = {9781450372374},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3330204.3330225},
doi = {10.1145/3330204.3330225},
abstract = {Smart Contracts are software code that resides within a blockchain, using its infrastructure as an advantage and guarantee of execution. Blockchain and smart contracts are enabling new business models and standards to information systems. However, a smart contract needs to be well tested before to be published in a blockchain, since it cannot be changed after being deployed. The execution time to deploy smart contracts and run their tests is considerable because all transactions must be mined before being added to a new block. This work proposes an approach to reuse the execution of the deployment and the setup of unit test in smart contracts to reduce the execution time of these tests. Experiments have shown a large reduction in the execution time of smart contract unit tests, without breaking the principle of test independency.},
booktitle = {Proceedings of the XV Brazilian Symposium on Information Systems},
articleno = {16},
numpages = {8},
keywords = {Smart Contracts Testing, Test Automation},
location = {Aracaju, Brazil},
series = {SBSI'19}
}

@inproceedings{10.1145/3410886.3410907,
author = {Leid, Alexander and van der Merwe, Brink and Visser, Willem},
title = {Testing Ethereum Smart Contracts: A Comparison of Symbolic Analysis and Fuzz Testing Tools},
year = {2020},
isbn = {9781450388474},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3410886.3410907},
doi = {10.1145/3410886.3410907},
abstract = { Ethereum smart contract exploits have inflicted enormous monetary damage due to vulnerabilities introduced accidentally by the contract authors. Many of these errors can now be detected automatically by a growing number of security analysis tools that specifically target the most common vulnerabilities present in the Ethereum smart contract ecosystem. The aim of this work is to identify state-of-the-art security analysis tools that assist auditors in automatically testing and verifying real-world contracts. We compare two such symbolic executioners, Manticore (which we also extend) and Mythril, and one fuzz tester, Echidna, to evaluate their effectiveness when analysing a set of challenge contracts hosted online, as well as twenty of the most popular ERC-20 tokens found on the main Ethereum network. Our results showed that the tools were able to solve 24 of the 39 challenge contracts and both symbolic tools achieved on average more than 80% code coverage on successful evaluations of the popular ERC-20 token data. Code coverage plateaued after the second symbolic transaction, suggesting a good performance target for continuous integration environments.},
booktitle = {Conference of the South African Institute of Computer Scientists and Information Technologists 2020},
pages = {35–43},
numpages = {9},
keywords = {Fuzz Testing., Symbolic Execution, Ethereum smart contracts, Verification, Testing},
location = {Cape Town, South Africa},
series = {SAICSIT '20}
}

@inproceedings{10.1145/3324884.3415298,
author = {Ferreira, Jo\~{a}o F. and Cruz, Pedro and Durieux, Thomas and Abreu, Rui},
title = {SmartBugs: A Framework to Analyze Solidity Smart Contracts},
year = {2020},
isbn = {9781450367684},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3324884.3415298},
doi = {10.1145/3324884.3415298},
abstract = {Over the last few years, there has been substantial research on automated analysis, testing, and debugging of Ethereum smart contracts. However, it is not trivial to compare and reproduce that research. To address this, we present SmartBugs, an extensible and easy-to-use execution framework that simplifies the execution of analysis tools on smart contracts written in Solidity, the primary language used in Ethereum. SmartBugs is currently distributed with support for 10 tools and two datasets of Solidity contracts. The first dataset can be used to evaluate the precision of analysis tools, as it contains 143 annotated vulnerable contracts with 208 tagged vulnerabilities. The second dataset contains 47,518 unique contracts collected through Etherscan. We discuss how SmartBugs supported the largest experimental setup to date both in the number of tools and in execution time. Moreover, we show how it enables easy integration and comparison of analysis tools by presenting a new extension to the tool SmartCheck that improves substantially the detection of vulnerabilities related to the DASP10 categories Bad Randomness, Time Manipulation, and Access Control (identified vulnerabilities increased from 11% to 24%).},
booktitle = {Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering},
pages = {1349–1352},
numpages = {4},
keywords = {smart contracts, solidity, debugging, tools, reproducible bugs, blockchain, testing, ethereum},
location = {Virtual Event, Australia},
series = {ASE '20}
}

@inproceedings{10.1145/3377811.3380334,
author = {Nguyen, Tai D. and Pham, Long H. and Sun, Jun and Lin, Yun and Minh, Quang Tran},
title = {SFuzz: An Efficient Adaptive Fuzzer for Solidity Smart Contracts},
year = {2020},
isbn = {9781450371216},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377811.3380334},
doi = {10.1145/3377811.3380334},
abstract = {Smart contracts are Turing-complete programs that execute on the infrastructure of the blockchain, which often manage valuable digital assets. Solidity is one of the most popular programming languages for writing smart contracts on the Ethereum platform. Like traditional programs, smart contracts may contain vulnerabilities. Unlike traditional programs, smart contracts cannot be easily patched once they are deployed. It is thus important that smart contracts are tested thoroughly before deployment. In this work, we present an adaptive fuzzer for smart contracts on the Ethereum platform called sFuzz. Compared to existing Solidity fuzzers, sFuzz combines the strategy in the AFL fuzzer and an efficient lightweight multi-objective adaptive strategy targeting those hard-to-cover branches. sFuzz has been applied to more than 4 thousand smart contracts and the experimental results show that (1) sFuzz is efficient, e.g., two orders of magnitude faster than state-of-the-art tools; (2) sFuzz is effective in achieving high code coverage and discovering vulnerabilities; and (3) the different fuzzing strategies in sFuzz complement each other.},
booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
pages = {778–788},
numpages = {11},
location = {Seoul, South Korea},
series = {ICSE '20}
}

@inproceedings{10.1109/ASE.2019.00136,
author = {Li, Zixin and Wu, Haoran and Xu, Jiehui and Wang, Xingya and Zhang, Lingming and Chen, Zhenyu},
title = {MuSC: A Tool for Mutation Testing of Ethereum Smart Contract},
year = {2019},
isbn = {9781728125084},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ASE.2019.00136},
doi = {10.1109/ASE.2019.00136},
abstract = {The smart contract cannot be modified when it has been deployed on a blockchain. Therefore, it must be given thorough test before its being deployed. Mutation testing is considered as a practical test methodology to evaluate the adequacy of software testing. In this paper, we introduce MuSC, a mutation testing tool for Ethereum Smart Contract (ESC). It can generate numerous mutants at a fast speed and supports the automatic operations such as creating test nets, deploying and executing tests. Specially, MuSC implements a set of novel mutation operators w.r.t ESC programming language, Solidity. Therefore, it can expose the defects of smart contracts to a certain degree. The demonstration video of MuSC is available at https://youtu.be/3KBKXJPVjbQ, and the source code can be downloaded at https://github.com/belikout/MuSC-Tool-Demo-repo.},
booktitle = {Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering},
pages = {1198–1201},
numpages = {4},
keywords = {mutation test, ethereum smart contract, mutation operator, Blockchain},
location = {San Diego, California},
series = {ASE '19}
}

@inproceedings{10.5555/3370272.3370300,
author = {Medeiros, Hallan and Vilain, Patr\'{\i}cia and Mylopoulos, John and Jacobsen, Hans-Arno},
title = {SolUnit: A Framework for Reducing Execution Time of Smart Contract Unit Tests},
year = {2019},
publisher = {IBM Corp.},
address = {USA},
abstract = {Smart contracts are software programs implemented on a blockchain platform that monitor and automate the execution of contracts to ensure compliance with the terms and conditions of a contract. As such, smart contracts represent a new kind of software that poses its own engineering challenges and requires novel software engineering techniques. In particular, smart contracts require thorough testing before they are deployed because they can't be changed after deployment. This paper proposes a novel approach for executing unit tests for smart contracts intended to reduce test execution time. This reduction is achieved through the reuse of the deployment execution of the smart contract in each test and also the reuse of the setup execution of each test. We implemented the framework SolUnit that uses this approach to execute tests written in Java for Ethereum Solidity smart contracts. We also evaluated the framework SolUnit in five projects. The results show that our approach achieves a meaningful reduction of the time to execute the tests, without breaking the principle of independent tests. The experiments were performed in two environments: an in-memory simulated blockchain and a private Ethereum-based blockchain. Overall, our approach was able to reduce the test execution time by up to 70%.},
booktitle = {Proceedings of the 29th Annual International Conference on Computer Science and Software Engineering},
pages = {264–273},
numpages = {10},
keywords = {SolUnit, solidity, Ethereum, unit testing, smart contract, blockchain, testing framework, test automation, software testing},
location = {Toronto, Ontario, Canada},
series = {CASCON '19}
}

@inproceedings{10.1109/ASE.2019.00133,
author = {Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex and Grieco, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg, Artem},
title = {Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts},
year = {2019},
isbn = {9781728125084},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ASE.2019.00133},
doi = {10.1109/ASE.2019.00133},
abstract = {An effective way to maximize code coverage in software tests is through dynamic symbolic execution---a technique that uses constraint solving to systematically explore a program's state space. We introduce an open-source dynamic symbolic execution framework called Manticore for analyzing binaries and Ethereum smart contracts. Manticore's flexible architecture allows it to support both traditional and exotic execution environments, and its API allows users to customize their analysis. Here, we discuss Manticore's architecture and demonstrate the capabilities we have used to find bugs and verify the correctness of code for our commercial clients.},
booktitle = {Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering},
pages = {1186–1189},
numpages = {4},
location = {San Diego, California},
series = {ASE '19}
}

