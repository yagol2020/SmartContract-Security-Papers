@inproceedings{10.1145/3238147.3238177,
author = {Jiang, Bo and Liu, Ye and Chan, W. K.},
title = {ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection},
year = {2018},
isbn = {9781450359375},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3238147.3238177},
doi = {10.1145/3238147.3238177},
abstract = {Decentralized cryptocurrencies feature the use of blockchain to transfer values among peers on networks without central agency. Smart contracts are programs running on top of the blockchain consensus protocol to enable people make agreements while minimizing trusts. Millions of smart contracts have been deployed in various decentralized applications. The security vulnerabilities within those smart contracts pose significant threats to their applications. Indeed, many critical security vulnerabilities within smart contracts on Ethereum platform have caused huge financial losses to their users. In this work, we present ContractFuzzer, a novel fuzzer to test Ethereum smart contracts for security vulnerabilities. ContractFuzzer generates fuzzing inputs based on the ABI specifications of smart contracts, defines test oracles to detect security vulnerabilities, instruments the EVM to log smart contracts runtime behaviors, and analyzes these logs to report security vulnerabilities. Our fuzzing of 6991 smart contracts has flagged more than 459 vulnerabilities with high precision. In particular, our fuzzing tool successfully detects the vulnerability of the DAO contract that leads to USD 60 million loss and the vulnerabilities of Parity Wallet that have led to the loss of USD 30 million and the freezing of USD 150 million worth of Ether.},
booktitle = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
pages = {259–269},
numpages = {11},
keywords = {Ethereum, Fuzzer, Test oracle, Vulnerability, Blockchain, Smart contract, Fuzzing},
location = {Montpellier, France},
series = {ASE 2018}
}

@inproceedings{10.1145/3324884.3416646,
author = {Feng, Yu and Torlak, Emina and Bodik, Rastislav},
title = {Summary-Based Symbolic Evaluation for Smart Contracts},
year = {2020},
isbn = {9781450367684},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3324884.3416646},
doi = {10.1145/3324884.3416646},
abstract = {This paper presents Solar, a system for automatic synthesis of adversarial contracts that exploit vulnerabilities in a victim smart contract. To make the synthesis tractable, we introduce a query language as well as summary-based symbolic evaluation, which significantly reduces the number of instructions that our synthesizer needs to evaluate symbolically, without compromising the precision of the vulnerability query. We encoded common vulnerabilities of smart contracts and evaluated Solar on the entire data set from Etherscan. Our experiments demonstrate the benefits of summary-based symbolic evaluation and show that Solar outperforms state-of-the-art smart contracts analyzers, teether, Mythril, and ContractFuzzer, in terms of running time and precision.},
booktitle = {Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering},
pages = {1141–1152},
numpages = {12},
location = {Virtual Event, Australia},
series = {ASE '20}
}

@inproceedings{10.1145/3468264.3473929,
author = {Ren, Meng and Ma, Fuchen and Yin, Zijing and Fu, Ying and Li, Huizhong and Chang, Wanli and Jiang, Yu},
title = {Making Smart Contract Development More Secure and Easier},
year = {2021},
isbn = {9781450385626},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468264.3473929},
doi = {10.1145/3468264.3473929},
abstract = {With the rapid development of distributed applications, smart contracts have attracted more and more developers' attentions. However, developers or domain experts have different levels of familiarity with specific programming languages, like Solidity, and those vulnerabilities hidden in the code would be exploited and result in huge property losses. Existing auxiliary tools lack security considerations. Most of them only provide word completion based on fuzzy search and detection services for limited types of vulnerabilities, which results in the manpower waste during coding and potential vulnerability threats after deployment.  In this work, we propose an integrated framework to enhance security in the two stages of recommendation and validation, assisting developers to implement more secure contracts more quickly. First, we reinforce original smart contracts with general patch patterns and secure programming standards for training, and design a real-time code suggestion algorithm to predict secure words for selection. Then, we integrate multiple widely-used testing tools to provide validation services. For evaluation, we collected 47,398 real-world contracts, and the result shows that it outperforms existing platforms and tools, improving the average word suggestion accuracy by 30%-60% and helping detect about 25%-61% more vulnerabilities. In most cases, our framework can correctly predict next words with the probability up to 82%-97% within top ten candidates. Compared with professional vulnerability mining tools, it can find more vulnerabilities and provide targeted modification suggestions without frivolous configurations. Currently, this framework has been used as the official development tool of WeBank and integrated as the recommended platform by FISCO-BCOS community.},
booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1360–1370},
numpages = {11},
keywords = {Integrated Testing, Smart Contract Development, Domain-specific Reinforcement},
location = {Athens, Greece},
series = {ESEC/FSE 2021}
}

@article{10.1145/3360615,
author = {Wang, Shuai and Zhang, Chengyu and Su, Zhendong},
title = {Detecting Nondeterministic Payment Bugs in Ethereum Smart Contracts},
year = {2019},
issue_date = {October 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {OOPSLA},
url = {https://doi.org/10.1145/3360615},
doi = {10.1145/3360615},
abstract = {The term “smart contracts” has become ubiquitous to describe an enormous number of programs uploaded to the popular Ethereum blockchain system. Despite rapid growth of the smart contract ecosystem, errors and exploitations have been constantly reported from online contract systems, which has put financial stability at risk with losses totaling millions of US dollars. Most existing research focuses on pinpointing specific types of vulnerabilities using known patterns. However, due to the lack of awareness of the inherent nondeterminism in the Ethereum blockchain system and how it affects the funds transfer of smart contracts, there can be unknown vulnerabilities that may be exploited by attackers to access numerous online smart contracts.  In this paper, we introduce a methodical approach to understanding the inherent nondeterminism in the Ethereum blockchain system and its (unwanted) influence on contract payments. We show that our new focus on nondeterminism-related smart contract payment bugs captures the root causes of many common vulnerabilities without relying on any known patterns and also encompasses recently disclosed issues that are not handled by existing research. To do so, we introduce techniques to systematically model components in the contract execution context and to expose various nondeterministic factors that are not yet fully understood. We further study how these nondeterministic factors impact contract funds transfer using information flow tracking. The technical challenge of detecting nondeterministic payments lies in discovering the contract global variables subtly affected by read-write hazards because of unpredictable transaction scheduling and external callee behavior. We show how to augment and instrument a contract program into a representation that simulates the execution of a large subset of the contract behavior. The instrumented code is then analyzed to flag nondeterministic global variables using off-the-shelf model checkers.  We implement the proposed techniques as a practical tool named NPChecker (Nondeterministic Payment Checker) and evaluate it on 30K online contracts (3,075 distinct) collected from the Ethereum mainnet. NPChecker has successfully detected nondeterministic payments in 1,111 online contracts with reasonable cost. Further investigation reports high precision of NPChecker (only four false positives in a manual study of 50 contracts). We also show that NPChecker unveils contracts vulnerable to recently-disclosed attack vectors. NPChecker can identify all six new vulnerabilities or variants of common smart contract vulnerabilities that are missed by existing research relying on a “contract vulnerability checklist.”},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {189},
numpages = {29},
keywords = {Security, Blockchain, Program Analysis, Smart Contracts}
}

@inproceedings{10.1145/3474374.3486916,
author = {Tjiam, Kevin and Wang, Rui and Chen, Huanhuan and Liang, Kaitai},
title = {Your Smart Contracts Are Not Secure: Investigating Arbitrageurs and Oracle Manipulators in Ethereum},
year = {2021},
isbn = {9781450386616},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3474374.3486916},
doi = {10.1145/3474374.3486916},
abstract = {Smart contracts on Ethereum enable billions of dollars to be transacted in a decentralized, transparent and trustless environment. However, adversaries lie await in the Dark Forest, waiting to exploit any and all smart contract vulnerabilities in order to extract profits from unsuspecting victims in this new financial system. As the blockchain space moves at a breakneck pace, exploits on smart contract vulnerabilities rapidly evolve, and existing research quickly becomes obsolete. It is imperative that smart contract developers stay up to date on the current most damaging vulnerabilities and countermeasures to ensure the security of users' funds, and to collectively ensure the future of Ethereum as a financial settlement layer. This research work focuses on two smart contract vulnerabilities: transaction-ordering dependency and oracle manipulation. Combined, these two vulnerabilities have been exploited to extract hundreds of millions of dollars from smart contracts in the past year (2020-2021). For each of them, this paper presents: (1) a literary survey from recent (as of 2021) formal and informal sources; (2) a reproducible experiment as code demonstrating the vulnerability and, where applicable, countermeasures to mitigate the vulnerability; and (3) analysis and discussion on proposed countermeasures. To conclude, strengths, weaknesses and trade-offs of these countermeasures are summarised, inspiring directions for future research.},
booktitle = {Proceedings of the 3rd Workshop on Cyber-Security Arms Race},
pages = {25–35},
numpages = {11},
keywords = {oracle manipulator, arbitrageurs, smart contract, vulnerability, security, ethereum},
location = {Virtual Event, Republic of Korea},
series = {CYSARM '21}
}

@inproceedings{10.1145/3463274.3463351,
author = {Ding, Mengjie and Li, Peiru and Li, Shanshan and Zhang, He},
title = {HFContractFuzzer: Fuzzing Hyperledger Fabric Smart Contracts for Vulnerability Detection},
year = {2021},
isbn = {9781450390538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3463274.3463351},
doi = {10.1145/3463274.3463351},
abstract = { With its unique advantages such as decentralization and immutability, blockchain technology has been widely used in various fields in recent years. The smart contract running on the blockchain is also playing an increasingly important role in decentralized application scenarios. Therefore, the automatic detection of security vulnerabilities in smart contracts has become an urgent problem in the application of blockchain technology. Hyperledger Fabric is a smart contract platform based on enterprise-level licensed distributed ledger technology. However, the research on the vulnerability detection technology of Hyperledger Fabric smart contracts is still in its infancy. In this paper, we propose HFContractFuzzer, a method based on Fuzzing technology to detect Hyperledger Fabric smart contracts, which combines a Fuzzing tool for golang named go-fuzz and smart contracts written by golang. We use HFContractFuzzer to detect vulnerabilities in five contracts from typical sources and discover that four of them have security vulnerabilities, proving the effectiveness of the proposed method.},
booktitle = {Evaluation and Assessment in Software Engineering},
pages = {321–328},
numpages = {8},
keywords = {Fuzzing, Blockchain, Security Vulnerability, Hyperledger Fabric, Smart Contract},
location = {Trondheim, Norway},
series = {EASE 2021}
}

@inproceedings{10.1109/ICPC.2019.00024,
author = {Liu, Han and Yang, Zhiqiang and Jiang, Yu and Zhao, Wenqi and Sun, Jiaguang},
title = {Enabling Clone Detection for Ethereum via Smart Contract Birthmarks},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICPC.2019.00024},
doi = {10.1109/ICPC.2019.00024},
abstract = {The Ethereum ecosystem has introduced a pervasive blockchain platform with programmable transactions. Everyone is allowed to develop and deploy smart contracts. Such flexibility can lead to a large collection of similar contracts, i.e., clones, especially when Ethereum applications are highly domain-specific and may share similar functionalities within the same domain, e.g., token contracts often provide interfaces for money transfer and balance inquiry. While smart contract clones have a wide range of impact across different applications, e.g., security, they are relatively little studied.Although clone detection has been a long-standing research topic, blockchain smart contracts introduce new challenges, e.g., syntactic diversity due to trade-off between storage and execution, understanding high-level business logic etc.. In this paper, we highlighted the very first attempt to clone detection of Ethereum smart contracts. To overcome the new challenges, we introduce the concept of smart contract birthmark, i.e., a semantic-preserving and computable representation for smart contract bytecode. The birthmark captures high-level semantics by effectively sketching symbolic execution traces (e.g., data access dependencies, path conditions) and maintain syntactic regularities (e.g., type and number of instructions) as well. Then, the clone detection problem is reduced to a computation of statistical similarity between two contract birthmarks. We have implemented a clone detector called EClone and evaluated it on Ethereum. The empirical results demonstrated the potential of EClone in accurately identifying clones. We have also extended EClone for vulnerability search and managed to detect CVE-2018-10376 instances.},
booktitle = {Proceedings of the 27th International Conference on Program Comprehension},
pages = {105–115},
numpages = {11},
keywords = {symbolic execution, clone detection, smart contract birthmark, ethereum},
location = {Montreal, Quebec, Canada},
series = {ICPC '19}
}

@inproceedings{10.1145/3377644.3377650,
author = {Lai, Enmei and Luo, Wenjun},
title = {Static Analysis of Integer Overflow of Smart Contracts in Ethereum},
year = {2020},
isbn = {9781450377447},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377644.3377650},
doi = {10.1145/3377644.3377650},
abstract = {In recent years, vulnerabilities of smart contracts have frequently break out. In particular, integer overflow of smart contracts, a high-risk vulnerability, has caused huge financial losses. However, most tools currently fail to detect integer overflow in smart contracts. In this paper, we summarize 11 types of integer overflow features for Solidity smart contracts in Ethereum and abstractly define 83 corresponding XPath patterns. And we design an extensible static analysis tool to detect common integer overflow vulnerabilities of Solidity smart contracts in Ethereum through the defined XPath patterns. To evaluate our tool, we tested 7,000 verified Solidity smart contracts and found that there were 430 smart contracts with vulnerabilities of integer overflow. Experimental results show that there are still high-risk vulnerabilities of integer overflow in verified smart contracts.},
booktitle = {Proceedings of the 2020 4th International Conference on Cryptography, Security and Privacy},
pages = {110–115},
numpages = {6},
keywords = {integer overflow, XPath, vulnerability detection, smart contract},
location = {Nanjing, China},
series = {ICCSP 2020}
}

@inproceedings{10.1145/3297156.3297239,
author = {Gu, Yonggen and Chen, Jiashen and Wu, Xiaohong},
title = {An Implement of Smart Contract Based Decentralized Online Crowdsourcing Mechanism},
year = {2018},
isbn = {9781450366069},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297156.3297239},
doi = {10.1145/3297156.3297239},
abstract = {With the gradual promotion, crowdsourcing has become an efficient way to solve problems that are very complicated for computers and simple for human crowd intelligence in recent years. Traditional crowdsourcing is based on a central system where requesters post tasks on a crowdsourcing central server or platform, however, this centralized model currently faces various challenges such as prohibitive cost, single point of failure, and vulnerability to malicious attacks. To this end, this paper proposes a smart contract-based decentralized online crowdsourcing mechanism, which includes task assignment rules and reward payment rules, etc. The mechanism has the characteristics like decentralization, unalterable, truthfulness and so on. In addition, the corresponding smart contract is designed, so that the mechanism can really run and process the actual data, and the effectiveness is shown by experiments. In this way, the entire crowdsourcing process no longer requires the participation of trusted third-party agencies, information and privacy security is guaranteed, and the cost is lower.},
booktitle = {Proceedings of the 2018 2nd International Conference on Computer Science and Artificial Intelligence},
pages = {195–199},
numpages = {5},
keywords = {blockchain, smart contract, Ethereum, decentralization, Crowdsourcing},
location = {Shenzhen, China},
series = {CSAI '18}
}

@inproceedings{10.1145/3460319.3464837,
author = {Ren, Meng and Yin, Zijing and Ma, Fuchen and Xu, Zhenyang and Jiang, Yu and Sun, Chengnian and Li, Huizhong and Cai, Yan},
title = {Empirical Evaluation of Smart Contract Testing: What is the Best Choice?},
year = {2021},
isbn = {9781450384599},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3460319.3464837},
doi = {10.1145/3460319.3464837},
abstract = {Security of smart contracts has attracted increasing attention in recent years. Many researchers have devoted themselves to devising testing tools for vulnerability detection. Each published tool has demonstrated its effectiveness through a series of evaluations on their own experimental scenarios. However, the inconsistency of evaluation settings such as different data sets or performance metrics, may result in biased conclusion.  In this paper, based on an empirical evaluation of widely used smart contract testing tools, we propose a unified standard to eliminate the bias in the assessment process. First, we collect 46,186 source-available smart contracts from four influential organizations. This comprehensive dataset is open to the public and involves different code characteristics, vulnerability patterns and application scenarios. Then we propose a 4-step evaluation process and summarize the difference among relevant work in these steps. We use nine representative tools to carry out extensive experiments. The results demonstrate that different choices of experimental settings could significantly affect tool performance and lead to misleading or even opposite conclusions. Finally, we generalize some problems of existing testing tools, and propose some possible directions for further improvement.},
booktitle = {Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {566–579},
numpages = {14},
keywords = {observations and solutions, smart contract testing, evaluation},
location = {Virtual, Denmark},
series = {ISSTA 2021}
}

@inproceedings{10.1145/3444370.3444617,
author = {Li, Ziyuan and Guo, Wangshu and Xu, Quan and Xu, Yingjie and Wang, Huimei and Xian, Ming},
title = {Research on Blockchain Smart Contracts Vulnerability and A Code Audit Tool Based on Matching Rules},
year = {2020},
isbn = {9781450387828},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3444370.3444617},
doi = {10.1145/3444370.3444617},
abstract = {As an emerging service architecture of multi-technology integration, blockchain draws the attention of public because of smart contracts which implement a secure and tamper-proof programming. However, due to the complexity of this architecture, there exists endless attacks against blockchain. Smart contracts as the application layer prototype of blockchain, face more severe security risks. This paper detailly lists the security events of smart contracts in recent years, summarizes several common attack modes, then introduces their principles and analyzes the commonness. Finally, an original version of the contract code audit tool based on matching rules is given. The tool can ensure that the contract has a complete audit process before deployment, so as to decrease the DApp vulnerability caused by poor programming. Moreover, the matching rule library supports customization, the tool can be updated timely to enhance its audit ability.},
booktitle = {Proceedings of the 2020 International Conference on Cyberspace Innovation of Advanced Technologies},
pages = {484–489},
numpages = {6},
keywords = {Audit tool, Blockchain, Smart contract vulnerability},
location = {Guangzhou, China},
series = {CIAT 2020}
}

@inproceedings{10.1145/3194113.3194115,
author = {Tikhomirov, Sergei and Voskresenskaya, Ekaterina and Ivanitskiy, Ivan and Takhaviev, Ramil and Marchenko, Evgeny and Alexandrov, Yaroslav},
title = {SmartCheck: Static Analysis of Ethereum Smart Contracts},
year = {2018},
isbn = {9781450357265},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3194113.3194115},
doi = {10.1145/3194113.3194115},
abstract = {Ethereum is a major blockchain-based platform for smart contracts - Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. Solidity is the most mature high-level smart contract language. Ethereum is a hostile execution environment, where anonymous attackers exploit bugs for immediate financial gain. Developers have a very limited ability to patch deployed contracts. Hackers steal up to tens of millions of dollars from flawed contracts, a well-known example being "The DAO", broken in June 2016. Advice on secure Ethereum programming practices is spread out across blogs, papers, and tutorials. Many sources are outdated due to a rapid pace of development in this field. Automated vulnerability detection tools, which help detect potentially problematic language constructs, are still underdeveloped in this area.We provide a comprehensive classification of code issues in Solidity and implement SmartCheck - an extensible static analysis tool that detects them1. SmartCheck translates Solidity source code into an XML-based intermediate representation and checks it against XPath patterns. We evaluated our tool on a big dataset of real-world contracts and compared the results with manual audit on three contracts. Our tool reflects the current state of knowledge on Solidity vulnerabilities and shows significant improvements over alternatives. SmartCheck has its limitations, as detection of some bugs requires more sophisticated techniques such as taint analysis or even manual audit. We believe though that a static analyzer should be an essential part of contract developers' toolbox, letting them fix simple bugs fast and allocate more effort to complex issues.},
booktitle = {Proceedings of the 1st International Workshop on Emerging Trends in Software Engineering for Blockchain},
pages = {9–16},
numpages = {8},
keywords = {static analysis, bug detection, ethereum, smart contracts, solidity},
location = {Gothenburg, Sweden},
series = {WETSEB '18}
}

@inproceedings{10.1109/ICSE-NIER.2019.00009,
author = {Wang, Haijun and Li, Yi and Lin, Shang-Wei and Ma, Lei and Liu, Yang},
title = {Vultron: Catching Vulnerable Smart Contracts Once and for All},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-NIER.2019.00009},
doi = {10.1109/ICSE-NIER.2019.00009},
abstract = {Despite the high stakes involved, smart contracts are often developed in an undisciplined way thus far. The existence of vulnerabilities compromises the security and reliability of smart contracts, and endangers the trust of participants in their ongoing businesses. Existing vulnerability detection techniques are often designed case-by-case, making them difficult to generalize. In this paper, we design general principles for detecting vulnerable smart contracts. Our key insight is that almost all the existing transaction-related vulnerabilities are due to the mismatch between the actual transferred amount and the amount reflected on the contract's internal bookkeeping. Based on this, we propose a precise and generally applicable technique, VULTRON, which can detect irregular transactions due to various types of adversarial exploits. We also report preliminary results applying our technique to real-world case studies.},
booktitle = {Proceedings of the 41st International Conference on Software Engineering: New Ideas and Emerging Results},
pages = {1–4},
numpages = {4},
location = {Montreal, Quebec, Canada},
series = {ICSE-NIER '19}
}

@inproceedings{10.1145/3274694.3274737,
author = {Torres, Christof Ferreira and Sch\"{u}tte, Julian and State, Radu},
title = {Osiris: Hunting for Integer Bugs in Ethereum Smart Contracts},
year = {2018},
isbn = {9781450365697},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3274694.3274737},
doi = {10.1145/3274694.3274737},
abstract = {The capability of executing so-called smart contracts in a decentralised manner is one of the compelling features of modern blockchains. Smart contracts are fully fledged programs which cannot be changed once deployed to the blockchain. They typically implement the business logic of distributed apps and carry billions of dollars worth of coins. In that respect, it is imperative that smart contracts are correct and have no vulnerabilities or bugs. However, research has identified different classes of vulnerabilities in smart contracts, some of which led to prominent multi-million dollar fraud cases. In this paper we focus on vulnerabilities related to integer bugs, a class of bugs that is particularly difficult to avoid due to some characteristics of the Ethereum Virtual Machine and the Solidity programming language.In this paper we introduce Osiris -- a framework that combines symbolic execution and taint analysis, in order to accurately find integer bugs in Ethereum smart contracts. Osiris detects a greater range of bugs than existing tools, while providing a better specificity of its detection. We have evaluated its performance on a large experimental dataset containing more than 1.2 million smart contracts. We found that 42,108 contracts contain integer bugs. Besides being able to identify several vulnerabilities that have been reported in the past few months, we were also able to identify a yet unknown critical vulnerability in a couple of smart contracts that are currently deployed on the Ethereum blockchain.},
booktitle = {Proceedings of the 34th Annual Computer Security Applications Conference},
pages = {664–676},
numpages = {13},
keywords = {Ethereum, integer bugs, taint analysis, symbolic execution, smart contracts},
location = {San Juan, PR, USA},
series = {ACSAC '18}
}

