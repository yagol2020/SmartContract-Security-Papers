@inproceedings{10.1145/3503921.3503923,
author = {Maier, Dominik and F\"{a}\ss{}ler, Fabian and Seifert, Jean-Pierre},
title = {Uncovering Smart Contract VM Bugs Via Differential Fuzzing},
year = {2022},
isbn = {9781450396028},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3503921.3503923},
doi = {10.1145/3503921.3503923},
abstract = {The ongoing public interest in blockchains and smart contracts has brought a rise to a magnitude of different blockchain implementations. The rate at which new concepts are envisioned and implemented makes it hard to vet their impact on security. Especially smart contract platforms, executing untrusted code, are very complex by design. Still, people put their trust and money into chains that may lack proper testing. A behavior deviation for edge cases of single op-codes is a critical bug class in this brave new world. It can be abused for Denial of Service against the blockchain, chain splits, double-spending, or direct attacks on applications operating on the blockchain. In this paper, we propose an automated methodology to uncover such differences. Through coverage-guided and state-guided fuzzing, we explore smart contract virtual machine behavior against multiple VMs in parallel. We develop NeoDiff, the first framework for feedback-guided differential fuzzing of smart contract VMs. We discuss real, monetary consequences our tool prevents. NeoDiff can be ported to new smart contract platforms with ease. Apart from fuzzing Ethereum VMs, NeoDiff found a range of critical differentials in VMs for the Neo blockchain. Moreover, through a higher-layer semantics mutator, we uncovered semantic discrepancies between Neo smart contracts written in Python when executed on the blockchain vs. classic CPython. Along the way, NeoDiff uncovered memory corruptions in the C# Neo VM.},
booktitle = {Reversing and Offensive-Oriented Trends Symposium},
pages = {11–22},
numpages = {12},
keywords = {State-Aware, Differential Fuzzing, Smart Contract VM},
location = {Vienna, Austria},
series = {ROOTS'21}
}

@inproceedings{10.1145/3494106.3528672,
author = {Crincoli, Giuseppe and Iadarola, Giacomo and La Rocca, Piera Elena and Martinelli, Fabio and Mercaldo, Francesco and Santone, Antonella},
title = {Vulnerable Smart Contract Detection by Means of Model Checking},
year = {2022},
isbn = {9781450391757},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3494106.3528672},
doi = {10.1145/3494106.3528672},
abstract = {We are recently witnessing an exponential use of blockchain technology since information infrastructures are increasingly moving from the concept of centralisation to the decentralization ones. Blockchain technology is strictly related to the exchange of sensitive information, and its massive adoption is corresponding to interest from attackers. In this paper, we propose a method to automatically detect whether a Smart Contract (i.e. a contract between two parties concerning the exchange of goods and services, it is executed automatically and is governed by a source code written by a developer, contains clearly conditions accepted by both parties and resides on a distributed and decentralised network of computers) exhibits vulnerability. The proposed method relies on model checking and, through the adoption of μ-Calculus rules, is aimed to detect four different vulnerabilities on Smart Contracts modeled as automata. We preliminary evaluate the proposed method on a dataset composed by 40 (vulnerable and legitimate) contracts, by obtaining a precision ranging from 0.98 to 1 and a recall equal to 1, confirming that the proposed method can be promising in vulnerable Smart Contract detection.},
booktitle = {Proceedings of the Fourth ACM International Symposium on Blockchain and Secure Critical Infrastructure},
pages = {3–10},
numpages = {8},
keywords = {blockchain, smart contract, security, privacy, model checking, formal methods},
location = {Nagasaki, Japan},
series = {BSCI '22}
}

@inproceedings{10.1145/3578527.3578538,
author = {Pani, Siddhasagar and Nallagonda, Harshita Vani and Vigneswaran and Medicherla, Raveendra Kumar and Rajan M},
title = {SmartFuzzDriverGen: Smart Contract Fuzzing Automation for Golang},
year = {2023},
isbn = {9798400700644},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3578527.3578538},
doi = {10.1145/3578527.3578538},
abstract = {Greybox fuzzers require intermediate programs called fuzz drivers to test smart contract APIs. These fuzz drivers use the semi-random inputs (bytes) generated by fuzzers to prepare suitable inputs required to test APIs. Further, fuzz driver also uses this input to decide sequence in which APIs to be invoked and enables the fuzzer to execute the APIs in that sequence to find the vulnerabilities, if any. Manually writing such complex and intelligent fuzz drivers is laborious, requires deep technical skills, hence can be cumbersome and error prone. In this paper, we propose SmartFuzzDriverGen framework to automatically generate fuzz drivers which invoke smart contract APIs using different strategies: unit-level, sequence-based (random, user-defined), and heuristics based. We evaluate the proposed framework by testing a prototype implementation of it with Golang smart contracts (targeted for Hyperledger Fabric platform) and study the effectiveness of the generated fuzz drivers in terms of code coverage as well as bug finding abilities. We observed that fuzzing of APIs in random sequences performed better than the other methods.},
booktitle = {Proceedings of the 16th Innovations in Software Engineering Conference},
articleno = {14},
numpages = {11},
keywords = {automated driver generation, blockchain, fuzzing, sequencing, smart contracts, vulnerability detection},
location = {Allahabad, India},
series = {ISEC '23}
}

@inproceedings{10.1145/3550355.3552462,
author = {Godoy, Javier and Galeotti, Juan Pablo and Garbervetsky, Diego and Uchitel, Sebastian},
title = {Predicate Abstractions for Smart Contract Validation},
year = {2022},
isbn = {9781450394666},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550355.3552462},
doi = {10.1145/3550355.3552462},
abstract = {Smart contracts are immutable programs deployed on the blockchain that can manage significant assets. Because of this, verification and validation of smart contracts is of vital importance. Indeed, it is industrial practice to hire independent specialized companies to audit smart contracts before deployment. Auditors typically rely on a combination of tools and experience but still fail to identify problems in smart contracts before deployment, causing significant losses. In this paper, we propose using predicate abstraction to construct models which can be used by auditors to explore and validate smart contact behaviour at the function call level by proposing predicates that expose different aspects of the contract. We propose predicates based on requires clauses and enum-type state variables as a starting point for contract validation and report on an evaluation on two different benchmarks.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems},
pages = {289–299},
numpages = {11},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/3524610.3529157,
author = {Vacca, Anna and Fredella, Michele and Di Sorbo, Andrea and Visaggio, Corrado A. and Canfora, Gerardo},
title = {An Empirical Investigation on the Trade-off between Smart Contract Readability and Gas Consumption},
year = {2022},
isbn = {9781450392983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3524610.3529157},
doi = {10.1145/3524610.3529157},
abstract = {Blockchain technology is becoming increasingly popular, and smart contracts (i.e., programs that run on top of the blockchain) represent a crucial element of this technology. In particular, smart contracts running on Ethereum (i.e., one of the most popular blockchain platforms) are often developed with Solidity, and their deployment and execution consume gas (i.e., a fee compensating the computing resources required). Smart contract development frequently involves code reuse, but poor readable smart contracts could hinder their reuse. However, writing readable smart contracts is challenging, since practices for improving the readability could also be in contrast with optimization strategies for reducing gas consumption. This paper aims at better understanding (i) the readability aspects for which traditional software and smart contracts differ, and (ii) the specific smart contract readability features exhibiting significant relationships with gas consumption. We leverage a set of metrics that previous research has proven correlated with code readability. In particular, we first compare the values of these metrics obtained for both Solidity smart contracts and traditional software systems (written in Java). Then, we investigate the correlations occurring between these metrics and gas consumption and between each pair of metrics. The results of our study highlight that smart contracts usually exhibit lower readability than traditional software for what concerns the number of parentheses, inline comments, and blank lines used. In addition, we found some readability metrics (such as the average length of identifiers and the average number of keywords) that significantly correlate with gas consumption.},
booktitle = {Proceedings of the 30th IEEE/ACM International Conference on Program Comprehension},
pages = {214–224},
numpages = {11},
keywords = {software metrics, readability metrics, empirical study, software engineering for blockchain technologies, code quality},
location = {Virtual Event},
series = {ICPC '22}
}

@inproceedings{10.1109/ASE51524.2021.9678888,
author = {Choi, Jaeseung and Kim, Doyeon and Kim, Soomin and Grieco, Gustavo and Groce, Alex and Cha, Sang Kil},
title = {SMARTIAN: Enhancing Smart Contract Fuzzing with Static and Dynamic Data-Flow Analyses},
year = {2022},
isbn = {9781665403375},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ASE51524.2021.9678888},
doi = {10.1109/ASE51524.2021.9678888},
abstract = {Unlike traditional software, smart contracts have the unique organization in which a sequence of transactions shares persistent states. Unfortunately, such a characteristic makes it difficult for existing fuzzers to find out critical transaction sequences. To tackle this challenge, we employ both static and dynamic analyses for fuzzing smart contracts. First, we statically analyze smart contract bytecodes to predict which transaction sequences will lead to effective testing, and figure out if there is a certain constraint that each transaction should satisfy. Such information is then passed to the fuzzing phase and used to construct an initial seed corpus. During a fuzzing campaign, we perform a lightweight dynamic data-flow analysis to collect data-flow-based feedback to effectively guide fuzzing. We implement our ideas on a practical open-source fuzzer, named Smartian. Smartian can discover bugs in real-world smart contracts without the need for the source code. Our experimental results show that Smartian is more effective than existing state-of-the-art tools in finding known CVEs from real-world contracts. Smartian also outperforms other tools in terms of code coverage.},
booktitle = {Proceedings of the 36th IEEE/ACM International Conference on Automated Software Engineering},
pages = {227–239},
numpages = {13},
location = {Melbourne, Australia},
series = {ASE '21}
}

@inproceedings{10.1145/3551349.3560428,
author = {Zhang, Zhuo and Lei, Yan and Yan, Meng and Yu, Yue and Chen, Jiachi and Wang, Shangwen and Mao, Xiaoguang},
title = {Reentrancy Vulnerability Detection and Localization: A Deep Learning Based Two-Phase Approach},
year = {2023},
isbn = {9781450394758},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3551349.3560428},
doi = {10.1145/3551349.3560428},
abstract = {Smart contracts have been widely and rapidly used to automate financial and business transactions together with blockchains, helping people make agreements while minimizing trusts. With millions of smart contracts deployed on blockchain, various bugs and vulnerabilities in smart contracts have emerged. Following the rapid development of deep learning, many recent studies have used deep learning for vulnerability detection to conduct security checks before deploying smart contracts. These approaches show effective results on detecting whether a smart contract is vulnerable or not whereas their results on locating suspicious statements responsible for the detected vulnerability are still unsatisfactory. To address this problem, we propose a deep learning based two-phase smart contract debugger for reentrancy vulnerability, one of the most severe vulnerabilities, named as ReVulDL: Reentrancy Vulnerability Detection and Localization. ReVulDL integrates the vulnerability detection and localization into a unified debugging pipeline. For the detection phase, given a smart contract, ReVulDL uses a graph-based pre-training model to learn the complex relationships in propagation chains for detecting whether the smart contract contains a reentrancy vulnerability. For the localization phase, if a reentrancy vulnerability is detected, ReVulDL utilizes interpretable machine learning to locate the suspicious statements in smart contract to provide interpretations of the detected vulnerability. Our large-scale empirical study on 47,398 smart contracts shows that ReVulDL achieves promising results in detecting reentrancy vulnerabilities (e.g., outperforming 16 state-of-the-art vulnerability detection approaches) and locating vulnerable statements (e.g., 70.38% of the vulnerable statements are ranked within Top-10).},
booktitle = {Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering},
articleno = {83},
numpages = {13},
keywords = {reentrancy vulnerability, vulnerability detection, Smart contract, fault localization},
location = {Rochester, MI, USA},
series = {ASE '22}
}

@inproceedings{10.1145/3533767.3534372,
author = {Liu, Ye and Li, Yi and Lin, Shang-Wei and Artho, Cyrille},
title = {Finding Permission Bugs in Smart Contracts with Role Mining},
year = {2022},
isbn = {9781450393799},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3533767.3534372},
doi = {10.1145/3533767.3534372},
abstract = {Smart contracts deployed on permissionless blockchains, such as Ethereum, are accessible to any user in a trustless environment. Therefore, most smart contract applications implement access control policies to protect their valuable assets from unauthorized accesses. A difficulty in validating the conformance to such policies, i.e., whether the contract implementation adheres to the expected behaviors, is the lack of policy specifications. In this paper, we mine past transactions of a contract to recover a likely access control model, which can then be checked against various information flow policies and identify potential bugs related to user permissions. We implement our role mining and security policy validation in tool SPCon. The experimental evaluation on labeled smart contract role mining benchmark demonstrates that SPCon effectively mines more accurate user roles compared to the state-of-the-art role mining tools. Moreover, the experimental evaluation on real-world smart contract benchmark and access control CVEs indicates SPCon effectively detects potential permission bugs while having better scalability and lower false-positive rate compared to the state-of-the-art security tools, finding 11 previously unknown bugs and detecting six CVEs that no other tool can find.},
booktitle = {Proceedings of the 31st ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {716–727},
numpages = {12},
keywords = {information flow policy, Smart contract, role mining, access control},
location = {Virtual, South Korea},
series = {ISSTA 2022}
}

@inproceedings{10.1145/3551349.3560429,
author = {Su, Jianzhong and Dai, Hong-Ning and Zhao, Lingjun and Zheng, Zibin and Luo, Xiapu},
title = {Effectively Generating Vulnerable Transaction Sequences in Smart Contracts with Reinforcement Learning-Guided Fuzzing},
year = {2023},
isbn = {9781450394758},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3551349.3560429},
doi = {10.1145/3551349.3560429},
abstract = {As computer programs run on top of blockchain, smart contracts have proliferated a myriad of decentralized applications while bringing security vulnerabilities, which may cause huge financial losses. Thus, it is crucial and urgent to detect the vulnerabilities of smart contracts. However, existing fuzzers for smart contracts are still inefficient to detect sophisticated vulnerabilities that require specific vulnerable transaction sequences to trigger. To address this challenge, we propose a novel vulnerability-guided fuzzer based on reinforcement learning, namely RLF, for generating vulnerable transaction sequences to detect such sophisticated vulnerabilities in smart contracts. In particular, we firstly model the process of fuzzing smart contracts as a Markov decision process to construct our reinforcement learning framework. We then creatively design an appropriate reward with consideration of both vulnerability and code coverage so that it can effectively guide our fuzzer to generate specific transaction sequences to reveal vulnerabilities, especially for the vulnerabilities related to multiple functions. We conduct extensive experiments to evaluate RLF’s performance. The experimental results demonstrate that our RLF outperforms state-of-the-art vulnerability-detection tools (e.g., detecting 8%-69% more vulnerabilities within 30 minutes).},
booktitle = {Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering},
articleno = {36},
numpages = {12},
keywords = {Fuzzing, Reinforcement learning, Smart contract},
location = {Rochester, MI, USA},
series = {ASE '22}
}

@inproceedings{10.1145/3524481.3527228,
author = {Palechor, Luisa and Bezemer, Cor-Paul},
title = {How Are Solidity Smart Contracts Tested in Open Source Projects? An Exploratory Study},
year = {2022},
isbn = {9781450392860},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3524481.3527228},
doi = {10.1145/3524481.3527228},
abstract = {Smart contracts are self-executing programs that are stored on the blockchain. Once a smart contract is compiled and deployed on the blockchain, it cannot be modified. Therefore, having a bug-free smart contract is vital. To ensure a bug-free smart contract, it must be tested thoroughly. However, little is known about how developers test smart contracts in practice. Our study explores 139 open source smart contract projects that are written in Solidity to investigate the state of smart contract testing from three dimensions: (1) the developers working on the tests, (2) the used testing frameworks and testnets and (3) the type of tests that are conducted. We found that mostly core developers of a project are responsible for testing the contracts. Second, developers typically use only functional testing frameworks to test a smart contract, with Truffle being the most popular one. Finally, our results show that functional testing is conducted in most of the studied projects (93%), security testing is only performed in a few projects (9.4%) and traditional performance testing is conducted in none. In addition, we found 34 projects that mentioned or published external audit reports.},
booktitle = {Proceedings of the 3rd ACM/IEEE International Conference on Automation of Software Test},
pages = {165–169},
numpages = {5},
keywords = {solidity, testing, smart contracts},
location = {Pittsburgh, Pennsylvania},
series = {AST '22}
}

@inproceedings{10.1145/3510454.3516869,
author = {Olsthoorn, Mitchell and Stallenberg, Dimitri and van Deursen, Arie and Panichella, Annibale},
title = {SynTest-Solidity: Automated Test Case Generation and Fuzzing for Smart Contracts},
year = {2022},
isbn = {9781450392235},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510454.3516869},
doi = {10.1145/3510454.3516869},
abstract = {Ethereum is the largest and most prominent smart contract platform. One key property of Ethereum is that once a contract is deployed, it can not be updated anymore. This increases the importance of thoroughly testing the behavior and constraints of the smart contract before deployment. Existing approaches in related work either do not scale or are only focused on finding crashing inputs. In this tool demo, we introduce SynTest-Solidity, an automated test case generation and fuzzing framework for Solidity. SynTest-Solidity implements various metaheuristic search algorithms, including random search (traditional fuzzing) and genetic algorithms (i.e., NSGA-II, MOSA, and DynaMOSA). Finally, we performed a preliminary empirical study to assess the effectiveness of SynTest-Solidity in testing Solidity smart contracts.},
booktitle = {Proceedings of the ACM/IEEE 44th International Conference on Software Engineering: Companion Proceedings},
pages = {202–206},
numpages = {5},
keywords = {smart contracts, test case generation, software testing, fuzzing, search-based software testing},
location = {Pittsburgh, Pennsylvania},
series = {ICSE '22}
}

@inproceedings{10.1145/3533767.3534218,
author = {Chen, Weimin and Sun, Zihan and Wang, Haoyu and Luo, Xiapu and Cai, Haipeng and Wu, Lei},
title = {WASAI: Uncovering Vulnerabilities in Wasm Smart Contracts},
year = {2022},
isbn = {9781450393799},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3533767.3534218},
doi = {10.1145/3533767.3534218},
abstract = {WebAssembly (Wasm) smart contracts have shown growing popularity across blockchains (e.g., EOSIO) recently. Similar to Ethereum smart contracts, Wasm smart contracts suffer from various attacks exploiting their vulnerabilities. Even worse, few developers released the source code of their Wasm smart contracts for security review, raising the bar for uncovering vulnerable contracts. Although a few approaches have been proposed to detect vulnerable Wasm smart contracts, they have several major limitations, e.g., low code coverage, low accuracy and lack of scalability, unable to produce exploit payloads, etc. To fill the gap, in this paper, we design and develop WASAI, a new concolic fuzzer for uncovering vulnerabilities in Wasm smart contract after tackling several challenging issues. We conduct extensive experiments to evaluate WASAI, and the results show that it outperforms the state-of-the-art methods. For example, it achieves 2x code coverage than the baselines and surpasses them in detection accuracy, with an F1-measure of 99.2%. Moreover, WASAI can handle complicated contracts (e.g., contracts with obfuscation and sophisticated verification). Applying WASAI to 991 deployed smart contracts in the wild, we find that over 70% of smart contracts are vulnerable. By the time of this study, over 300 vulnerable contracts have not been patched and are still operating on the EOSIO Mainnet. One fake EOS vulnerability reported to the EOSIO ecosystem was recently assigned a CVE identifier (CVE-2022-27134).},
booktitle = {Proceedings of the 31st ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {703–715},
numpages = {13},
keywords = {dynamic software analysis, Concolic fuzzing, smart contracts},
location = {Virtual, South Korea},
series = {ISSTA 2022}
}

@inproceedings{10.1145/3530019.3531344,
author = {Akbar, Muhammad Azeem and Mahmood, Sajjad and Siemon, Dominik},
title = {Toward Effective and Efficient DevOps Using Blockchain},
year = {2022},
isbn = {9781450396134},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3530019.3531344},
doi = {10.1145/3530019.3531344},
abstract = {Recently, blockchain and DevOps have received attention from the software industry as both offer number of benefits individually. Automation, measurement, and sharing are the core pillars of DevOps, and to securely manage these; blockchain can play an important role. This study aims to understand the role of blockchain technology in the DevOps paradigm. This study presents factors that influence the adoption of blockchain in DevOps. Furthermore, this study suggests a framework that assists in merging the characteristics of blockchain in the DevOps paradigm. The findings of this study give a knowledge base for industry experts and the research community to develop the roadmap and guidelines for the adoption of blockchain in the DevOps paradigm.},
booktitle = {Proceedings of the International Conference on Evaluation and Assessment in Software Engineering 2022},
pages = {421–427},
numpages = {7},
keywords = {DevOps, Factors, blockchain, Framework},
location = {Gothenburg, Sweden},
series = {EASE '22}
}

@inproceedings{10.1145/3563768.3565551,
author = {Lahiri, Sumit},
title = {Verification of Programs with Concealed Components},
year = {2022},
isbn = {9781450399012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3563768.3565551},
doi = {10.1145/3563768.3565551},
abstract = {Real-world programs contain a multitude of concealed components whose formal semantics not available to verification engines, like third-party API calls, inline assembly and SIMD instructions, system calls, sampling assignments from probability distributions and library calls. Albiet the success of program verification, proving correctness of such "open" programs has remained a challenge. Currently, this problem is handled by manually "closing" the program---by providing hand-written mocks that attempt to capture the behavior of these concealed components. Most often, writing such mock code (stubs) is not only ardious, but are often erroneous, thus raising serious questions on the whole endeavor. In light of this challenge, we came up with a novel technique, almost verification as an attempt to prove correctness for such "open" programs.},
booktitle = {Companion Proceedings of the 2022 ACM SIGPLAN International Conference on Systems, Programming, Languages, and Applications: Software for Humanity},
pages = {43–46},
numpages = {4},
keywords = {program verification, opaque components, concealed components, program testing, fuzzing},
location = {Auckland, New Zealand},
series = {SPLASH Companion 2022}
}

@inproceedings{10.1145/3490486.3538342,
author = {Schwartzbach, Nikolaj Ignatieff},
title = {Payment Schemes from Limited Information with Applications in Distributed Computing},
year = {2022},
isbn = {9781450391504},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3490486.3538342},
doi = {10.1145/3490486.3538342},
abstract = {We propose a generic mechanism for incentivizing behavior in an arbitrary finite game using payments. Doing so is trivial if the mechanism is allowed to observe all actions taken in the game, as this allows it to simply punish those agents who deviate from the intended strategy. Instead, we consider an abstraction where the mechanism probabilistically infers information about the outcome of the game. We show that payment schemes can be used to implement any set of utilities if and only if the mechanism can essentially infer completely what happened. We show that finding an optimal payment scheme for games of perfect information is P-complete, and conjecture it to be PPAD-hard for games of imperfect information. We prove a lower bound on the size of the payments, showing that the payments must be linear in the intended level of security. We demonstrate the applicability of our model to concrete problems in distributed computing, namely decentralized commerce and secure multiparty computation, for which the payments match the lower bound asymptotically.},
booktitle = {Proceedings of the 23rd ACM Conference on Economics and Computation},
pages = {129–149},
numpages = {21},
keywords = {mechanism design, smart contracts, payments, decentralized commerce, secure multiparty computation},
location = {Boulder, CO, USA},
series = {EC '22}
}

@article{10.1145/3567593,
author = {Ahuja, Aditya and Ribeiro, Vinay and Pal, Ranjan},
title = {How Should We Regulate Cryptocurrencies via Consensus?: A Strategic Framework for Optimal Legal Transaction Throughput},
year = {2023},
issue_date = {March 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {1},
issn = {2769-6472},
url = {https://doi.org/10.1145/3567593},
doi = {10.1145/3567593},
abstract = {Permissionless blockchain consensus protocols have been leveraged for defining decentralized economies for the (commercial or private) trade of virtual and physical assets, using cryptocurrencies. In most instances, the assets being traded are regulated, which mandates that the legal right to their trade and their trade value are determined by the governmental regulator of the jurisdiction in which the trade occurs. Unfortunately, existing blockchains do not formalize proposal of legal cryptocurrency transactions, as part of the execution of their respective consensus protocols, resulting in illegal activities in the associated crypto-economies. In this contribution, unlike existing non-consensus solutions, which are prone to be more compute-time and audit-time intensive, we present a novel regulatory framework for blockchain protocols, for ensuring legal transaction confirmation as part of the blockchain consensus. As per our regulatory framework, we derive, through a stochastic game analysis, block proposal strategies under which legal transaction throughput supersedes throughput of traditional transactions, which are, in the worst case, an indifferentiable mix of legal and illegal transactions. Finally, we show that when a majority of the consensus protocol participants are licensed by the regulator to propose legal transactions, there exists a fair consensus execution policy to maximize the legal transaction throughput in the blockchain network.},
journal = {Distrib. Ledger Technol.},
month = {mar},
articleno = {4},
numpages = {20},
keywords = {regulated blockchain consensus protocols, Nash Equilibria, Legal cryptocurrency transactions, regulated blockchain stochastic games}
}

@proceedings{10.1145/3578527,
title = {ISEC '23: Proceedings of the 16th Innovations in Software Engineering Conference},
year = {2023},
isbn = {9798400700644},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Allahabad, India}
}

@article{10.1145/3512345,
author = {Zhu, Xiaogang and Wen, Sheng and Camtepe, Seyit and Xiang, Yang},
title = {Fuzzing: A Survey for Roadmap},
year = {2022},
issue_date = {January 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {11s},
issn = {0360-0300},
url = {https://doi.org/10.1145/3512345},
doi = {10.1145/3512345},
abstract = {Fuzz testing (fuzzing) has witnessed its prosperity in detecting security flaws recently. It generates a large number of test cases and monitors the executions for defects. Fuzzing has detected thousands of bugs and vulnerabilities in various applications. Although effective, there lacks systematic analysis of gaps faced by fuzzing. As a technique of defect detection, fuzzing is required to narrow down the gaps between the entire input space and the defect space. Without limitation on the generated inputs, the input space is infinite. However, defects are sparse in an application, which indicates that the defect space is much smaller than the entire input space. Besides, because fuzzing generates numerous test cases to repeatedly examine targets, it requires fuzzing to perform in an automatic manner. Due to the complexity of applications and defects, it is challenging to automatize the execution of diverse applications. In this article, we systematically review and analyze the gaps as well as their solutions, considering both breadth and depth. This survey can be a roadmap for both beginners and advanced developers to better understand fuzzing.},
journal = {ACM Comput. Surv.},
month = {sep},
articleno = {230},
numpages = {36},
keywords = {fuzzing theory, security, Fuzz testing, automation, input space}
}

@proceedings{10.1145/3559795,
title = {BIOTC '22: Proceedings of the 2022 4th Blockchain and Internet of Things Conference},
year = {2022},
isbn = {9781450396622},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Tokyo, China}
}

@proceedings{10.1145/3569507,
title = {CCIOT '22: Proceedings of the 2022 7th International Conference on Cloud Computing and Internet of Things},
year = {2022},
isbn = {9781450396738},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Okinawa, Japan}
}

@article{10.1145/3539814.3539821,
author = {Soldani, Jacopo},
title = {An Interview with Xin Xia - 2022 SIGSOFT Awardee},
year = {2022},
issue_date = {July 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {47},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/3539814.3539821},
doi = {10.1145/3539814.3539821},
abstract = {Xin Xia received the 2022 SIGSOFT Early Career Researcher Award for his contributions to AI and SE, mining software repositories, and empirical software engineering. He is the Director of the Software Engineering Application Technology Lab at Huawei, China. He received the Ph.D. degree in Computer Science in 2014 from the College of Computer Science and Technology (Zhejiang University, China), and - prior to joining Huawei - he was an ARC DECRA Fellow and a lecturer at the Faculty of Information Technology, Monash University, Australia.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {jul},
pages = {22–23},
numpages = {2}
}

@inproceedings{10.1145/3559795.3559800,
author = {Li, Heng and Wang, Gan and Wang, Fang},
title = {Research Progress and Trend Prospect of Blockchain Technology Application in Logistics and Supply Chain Information System under Pandemic-Hit},
year = {2022},
isbn = {9781450396622},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3559795.3559800},
doi = {10.1145/3559795.3559800},
abstract = {The logistics and supply chain of pandemic prevention materials is an important pillar of the pandemic prevention and control system, and the information system is the “Nerve Center” that ensures the efficient operation of the logistics and supply chain. Blockchain technology has the characteristics of transparency and credibility, tamper-proof traceability, privacy security and high reliability of the system, and it is of great significance to study how to apply blockchain technology to improve the logistics and supply chain information system of pandemic prevention materials, so as to better cope with the current and possible future pandemic. To this end, this paper uses the literature analysis method and knowledge map method to reveal the research status, hot spots and evolution context of blockchain technology application in the logistics and supply chain information system under pandemic-hit. The research results show that there is a significant correlation between the number and theme changes of relevant literature and the progress of pandemic prevention and control. There have been a number of research hotspots, but they are still relatively scattered. There are few studies on the organic combination of blockchain technology application, pandemic prevention and control, the logistics and supply chain information system. Looking forward to the research trend, in the future, blockchain can be integrated with the Internet of things, cloud computing, big data, etc., so as to ensure the efficient operation of pandemic emergency logistics, help the management of pandemic material donation, and improve the pandemic medical material supply chain information system.},
booktitle = {Proceedings of the 2022 4th Blockchain and Internet of Things Conference},
pages = {29–37},
numpages = {9},
keywords = {trend prospect, blockchain technology, pandemic-hit, supply chain, logistics, information system, research progress},
location = {Tokyo, China},
series = {BIOTC '22}
}

@inproceedings{10.1145/3497776.3517765,
author = {Groce, Alex and van Tonder, Rijnard and Kalburgi, Goutamkumar Tulajappa and Le Goues, Claire},
title = {Making No-Fuss Compiler Fuzzing Effective},
year = {2022},
isbn = {9781450391832},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3497776.3517765},
doi = {10.1145/3497776.3517765},
abstract = {Developing a bug-free compiler is difficult; modern optimizing compilers are among the most complex software systems humans build. Fuzzing is one way to identify subtle compiler bugs that are hard to find with human-constructed tests. Grammar-based fuzzing, however, requires a grammar for a compiler’s input language, and can miss bugs induced by code that does not actually satisfy the grammar the compiler should accept. Grammar-based fuzzing also seldom uses advanced modern fuzzing techniques based on coverage feedback. However, modern mutation-based fuzzers are often ineffective for testing compilers because most inputs they generate do not even come close to getting past the parsing stage of compilation. This paper introduces a technique for taking a modern mutation-based fuzzer (AFL in our case, but the method is general) and augmenting it with operators taken from mutation testing, and program splicing. We conduct a controlled study to show that our hybrid approaches significantly improve fuzzing effectiveness qualitatively (consistently finding unique bugs that baseline approaches do not) and quantitatively (typically finding more unique bugs in the same time span, despite fewer program executions). Our easy-to-apply approach has allowed us to report more than 100 confirmed and fixed bugs in production compilers, and found a bug in the Solidity compiler that earned a security bounty.},
booktitle = {Proceedings of the 31st ACM SIGPLAN International Conference on Compiler Construction},
pages = {194–204},
numpages = {11},
keywords = {mutation testing, compiler development, fuzzing},
location = {Seoul, South Korea},
series = {CC 2022}
}

@inproceedings{10.1145/3569507.3569510,
author = {Shen, Tao and Cui, Zhize and Tian, Siben and Bai, Fenhua and Zhang, Chi},
title = {A Network-Elastic Scalable Blockchain for Privacy-Preserving Federated Learning in Cloud-Edge Collaboration Industrial Internet of Things},
year = {2022},
isbn = {9781450396738},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3569507.3569510},
doi = {10.1145/3569507.3569510},
abstract = {Federated Learning (FL) is a promising technology for cloud-edge collaborative computing in Industrial Internet of Things. Its hierarchical framework is compatible with cloud-edge collaboration and can keep the raw data locally by way of preserving privacy. However, the defect of FL is that it may be tampered with by malicious nodes and suffer attacks during the model transmission between client and server. To address this issue, we propose a new Scalable Blockchain Secure Federated learning (SBSF) architecture. First, the scheme of blockchain combined with the Feldman verifiable secret sharing is designed to ensure the model secure storage and defend attacks in the model transmission of FL. Then, a scalable blockchain in terms of off-chain storage supported by InterPlanetary File System (IPFS) put forward to meet the increasing storage demand in cloud-edge collaboration IIoT. Last but not least, in the process of block generation, an optimized Raft consensus algorithm Named-data Networking (NDN)-based is raised to improve the blockchain network transmission efficiency. Experimental results demonstrate the effectiveness of SBSF which outperforms baseline in promoting storage scalability and guaranteeing efficiency and accuracy.},
booktitle = {Proceedings of the 2022 7th International Conference on Cloud Computing and Internet of Things},
pages = {17–25},
numpages = {9},
keywords = {Industrial Internet of Things, Scalable Blockchain, Cloud-Edge Collaborative Computing, Named-data Networking (NDN), Secure Federated Learning},
location = {Okinawa, Japan},
series = {CCIOT '22}
}

@inproceedings{10.1145/3557738.3557873,
author = {Ivander, Ivander and Mahardini, Karunia Agung and Liawatimena, Suryadiputra},
title = {Inventory Level Reduction with VMI and Internet of Things Method},
year = {2022},
isbn = {9781450397186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3557738.3557873},
doi = {10.1145/3557738.3557873},
abstract = {PT. XYZ is a company focusing on producing herbal beverages in glass bottles. Inventory level is an important aspect and needs to be controlled by PT. XYZ because it has a strong relationship with the company's cash flow. At this moment, the average inventory level for the glass bottle of PT. XYZ is 32 days, while the target inventory level of the glass bottle must be achieved by PT. XYZ is 14 days. This research will focus on reducing the inventory level of glass bottles in PT. XYZ and ensure the supply sustainability in a high service level. Reduction of inventory level in PT. XYZ can be achieved by implementing the Internet of Things (IoT) and the Vendor Managed Inventory (VMI) method. VMI method implementation will focus on the stock availability with a low inventory level, and the implementation of the Internet of Things will make the inventory level information can be accessed in real-time and resolve this inventory problem. After improvement had been conducted, the service level (vendor performance) of glass bottles increased from 65% to 95%, and the inventory level reduced from 32 days of inventory (DOI) to 9 days.},
booktitle = {Proceedings of the 2022 International Conference on Engineering and Information Technology for Sustainable Industry},
articleno = {55},
numpages = {6},
keywords = {Internet of Things, Manufacturing system, Vendor Managed Inventory, Inventory level, Supply Chain},
location = {Alam Sutera, Tangerang, Indonesia},
series = {ICONETSI '22}
}

@proceedings{10.1145/3551349,
title = {ASE '22: Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering},
year = {2022},
isbn = {9781450394758},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Rochester, MI, USA}
}

@inproceedings{10.1145/3510487.3510493,
author = {Ling, Hongji and Wu, Fengheng and Chang, Jinpeng and Liu, Huan and Wu, Xiaohua},
title = {Alliance Chain Management System and Methods for Personal Files Based on Improved Multi-Layer PBFT},
year = {2022},
isbn = {9781450387460},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510487.3510493},
doi = {10.1145/3510487.3510493},
abstract = {The alliance chain and consensus mechanism are the focus of current blockchain research. The challenges faced by the alliance blockchain are performance and availability. This paper provides an alliance chain management system and methods based on improved multi-layer Practical Byzantine Fault Tolerance(PBFT), including node management module, level division module and consensus module, to improve performance and availability. The node management module is used for the system to manage node creation, level assignment and node deletion. The hierarchical division module is used in the system to classify all nodes according to their levels. The consensus module is used to combine the PBFT consensus algorithm, multi-layer nodes and incentive mechanism to achieve optimization. Furthermore, this paper uses the modules in a personal files system to highlight its usability. Finally, performance experiments show that our design effectively reduces the total consensus delay and the number of consensus communications, solved the shortcomings of the sharp decline in the performance of the alliance chain when the number of nodes increases, and improves its performance and availability.},
booktitle = {Proceedings of the 2021 4th International Conference on Blockchain Technology and Applications},
pages = {31–38},
numpages = {8},
keywords = {PBFT consensus, Consensus communication, Blockchain, Personal files system},
location = {Xi'an, China},
series = {ICBTA '21}
}

@proceedings{10.1145/3579895,
title = {ICNCC '22: Proceedings of the 2022 11th International Conference on Networks, Communication and Computing},
year = {2022},
isbn = {9781450398039},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Beijing, China}
}

@inproceedings{10.1109/ASE51524.2021.9678827,
author = {Wang, Bo and Lu, Sirui and Xiong, Yingfei and Liu, Feng},
title = {Faster Mutation Analysis with Fewer Processes and Smaller Overheads},
year = {2022},
isbn = {9781665403375},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ASE51524.2021.9678827},
doi = {10.1109/ASE51524.2021.9678827},
abstract = {Mutation analysis is a powerful dynamic approach that has many applications, such as measuring the quality of test suites or automatically locating faults. However, the inherent low scalability hampers its practical use. To accelerate mutation analysis, researchers propose approaches to reduce redundant executions. A family of fork-based approaches tries to share identical executions among mutants. Fork-based approaches carry all mutants in one process and decide whether to fork new child processes when reaching a mutated statement. The mutants carried by the parent process are split into groups and distributed to different processes to finish the remaining executions. However, existing fork-based approaches have two limitations: (1) the limited analysis scope on a single statement to compare and cluster mutants prevents their systems from detecting more equivalent mutants, and (2) the interpretation of the mutants and the runtime equivalence analysis introduce significant overhead.In this paper, we present a novel fork-based mutation analysis approach WinMut, which (1) groups mutants in a scope of mutated statements and, (2) removes redundant computations inside interpreters. WinMut not only reduces the number of invoked processes but also has a lower cost for executing a single process. Our experiments show that our approach can further accelerate mutation analysis with an average speedup of 5.57x on top of the state-of-the-art fork-based approach, AccMut.},
booktitle = {Proceedings of the 36th IEEE/ACM International Conference on Automated Software Engineering},
pages = {381–393},
numpages = {13},
keywords = {mutation analysis, fork-based mutation analysis, software testing, mutation testing, dynamic analysis},
location = {Melbourne, Australia},
series = {ASE '21}
}

@proceedings{10.1145/3540250,
title = {ESEC/FSE 2022: Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
year = {2022},
isbn = {9781450394130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {On behalf of all members of the organizing committee, we are delighted to welcome everyone to the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE) 2022. The event continues the long, distinguished ESEC/FSE tradition of presenting the most innovative research, and facilitating interactions between scientists and engineers who are passionate about advancing the theory and practice of software engineering.},
location = {Singapore, Singapore}
}

@article{10.1145/3588999,
author = {Hammi, Badis and Zeadally, Sherali and Nebhen, Jamel},
title = {Security Threats, Countermeasures, and Challenges of Digital Supply Chains},
year = {2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
issn = {0360-0300},
url = {https://doi.org/10.1145/3588999},
doi = {10.1145/3588999},
abstract = {The rapid growth of Information Communication Technologies (ICT) has impacted many fields. In this context, the supply chain has also quickly evolved toward the digital supply chain where digital and electronic technologies have been integrated into every aspect of its end-to-end process. This evolution provides numerous benefits such as profit maximization, loss reduction, and the optimization of supply chain lead times. However, the use of such technologies has also considerably opened up various security threats and risks which have widened the attack surface on the entire end-to-end supply chain. We present a holistic survey on supply chain security. We discuss the different security issues and attacks that target the different supply chain technologies. Then, we discuss various countermeasures and security solutions proposed by academic and industry researchers to mitigate the identified threats. Finally, we provide some recommendations and best practices that can be adopted to achieve a secure supply chain.},
note = {Just Accepted},
journal = {ACM Comput. Surv.},
month = {mar},
keywords = {Blockchain, Supply chain cybersecurity, CPS, Countermeasures, Cyberattacks, IIoT, issues}
}

@proceedings{10.1145/3584376,
title = {RICAI '22: Proceedings of the 2022 4th International Conference on Robotics, Intelligent Control and Artificial Intelligence},
year = {2022},
isbn = {9781450398343},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Dongguan, China}
}

@proceedings{10.1145/3579654,
title = {ACAI '22: Proceedings of the 2022 5th International Conference on Algorithms, Computing and Artificial Intelligence},
year = {2022},
isbn = {9781450398336},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Sanya, China}
}

@proceedings{10.1145/3567445,
title = {IoT '22: Proceedings of the 12th International Conference on the Internet of Things},
year = {2022},
isbn = {9781450396653},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Delft, Netherlands}
}

@proceedings{10.1145/3572549,
title = {ICETC '22: Proceedings of the 14th International Conference on Education Technology and Computers},
year = {2022},
isbn = {9781450397766},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Barcelona, Spain}
}

@proceedings{10.1145/3565387,
title = {CSAE '22: Proceedings of the 6th International Conference on Computer Science and Application Engineering},
year = {2022},
isbn = {9781450396004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Virtual Event, China}
}

@proceedings{10.1145/3577117,
title = {ICAIP '22: Proceedings of the 6th International Conference on Advances in Image Processing},
year = {2022},
isbn = {9781450397155},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Zhanjiang, China}
}

@proceedings{10.1145/3575879,
title = {PCI '22: Proceedings of the 26th Pan-Hellenic Conference on Informatics},
year = {2022},
isbn = {9781450398541},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Athens, Greece}
}

@proceedings{10.1145/3538969,
title = {ARES '22: Proceedings of the 17th International Conference on Availability, Reliability and Security},
year = {2022},
isbn = {9781450396707},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Vienna, Austria}
}

@proceedings{10.1145/3487553,
title = {WWW '22: Companion Proceedings of the Web Conference 2022},
year = {2022},
isbn = {9781450391306},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Virtual Event, Lyon, France}
}

@proceedings{10.1145/3573834,
title = {AISS '22: Proceedings of the 4th International Conference on Advanced Information Science and System},
year = {2022},
isbn = {9781450397933},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Sanya, China}
}

@proceedings{10.1145/3548608,
title = {ICCIR '22: Proceedings of the 2022 2nd International Conference on Control and Intelligent Robotics},
year = {2022},
isbn = {9781450397179},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Nanjing, China}
}

@proceedings{10.1145/3582935,
title = {ICITEE '22: Proceedings of the 5th International Conference on Information Technologies and Electrical Engineering},
year = {2022},
isbn = {9781450396806},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Changsha, China}
}

@proceedings{10.1145/3570236,
title = {ICIIP '22: Proceedings of the 7th International Conference on Intelligent Information Processing},
year = {2022},
isbn = {9781450396714},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Bucharest, Romania}
}

@proceedings{10.1145/3571662,
title = {ICCIP '22: Proceedings of the 8th International Conference on Communication and Information Processing},
year = {2022},
isbn = {9781450397100},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Beijing, China}
}

@proceedings{10.1145/3564625,
title = {ACSAC '22: Proceedings of the 38th Annual Computer Security Applications Conference},
year = {2022},
isbn = {9781450397599},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Austin, TX, USA}
}

@proceedings{10.1145/3573428,
title = {EITCE '22: Proceedings of the 2022 6th International Conference on Electronic Information Technology and Computer Engineering},
year = {2022},
isbn = {9781450397148},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Xiamen, China}
}

@proceedings{10.1145/3544549,
title = {CHI EA '23: Extended Abstracts of the 2023 CHI Conference on Human Factors in Computing Systems},
year = {2023},
isbn = {9781450394222},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Hamburg, Germany}
}

@proceedings{10.1145/3527049,
title = {SPBPU IDE '21: Proceedings of the 3rd International Scientific Conference on Innovations in Digital Economy},
year = {2021},
isbn = {9781450386944},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Saint - Petersburg, Russian Federation}
}

@proceedings{10.1145/3557738,
title = {ICONETSI '22: Proceedings of the 2022 International Conference on Engineering and Information Technology for Sustainable Industry},
year = {2022},
isbn = {9781450397186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Alam Sutera, Tangerang, Indonesia}
}

@proceedings{10.1145/3569966,
title = {CSSE '22: Proceedings of the 5th International Conference on Computer Science and Software Engineering},
year = {2022},
isbn = {9781450397780},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Guilin, China}
}

@proceedings{10.1145/3573942,
title = {AIPR '22: Proceedings of the 2022 5th International Conference on Artificial Intelligence and Pattern Recognition},
year = {2022},
isbn = {9781450396899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Xiamen, China}
}

@proceedings{10.1145/3575693,
title = {ASPLOS 2023: Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 2},
year = {2023},
isbn = {9781450399166},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {It is our pleasure to introduce Volume II of ASPLOS ’23. For the first time, ASPLOS has embarked on a new multi-deadline review model. ASPLOS ’23 features 3 deadlines spaced throughout the year and papers will be published in three volumes. Multiple deadlines are meant to encourage authors to submit their papers when ready and to facilitate the selection of some papers for revision. For this volume of ASPLOS ’23, we discontinued the use of the 2-page extended abstract submissions that were used in ASPLOS ’21 and ASPLOS ’22. We found the extended abstract offered limited filtering and moved to a more traditional two phase review process. Each paper received 3 reviews in phase 1 and papers with positive scores advanced to the second round and received up to 2 more reviews. In our preface to Volume III, we will give a more detailed rundown of how the process worked.},
location = {Vancouver, BC, Canada}
}

@proceedings{10.1145/3584202,
title = {ICFNDS '22: Proceedings of the 6th International Conference on Future Networks &amp; Distributed Systems},
year = {2022},
isbn = {9781450399050},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Tashkent, TAS, Uzbekistan}
}

@proceedings{10.1145/3582197,
title = {ICIT '22: Proceedings of the 2022 10th International Conference on Information Technology: IoT and Smart City},
year = {2022},
isbn = {9781450397438},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Shanghai, China}
}

@proceedings{10.1145/3555858,
title = {FDG '22: Proceedings of the 17th International Conference on the Foundations of Digital Games},
year = {2022},
isbn = {9781450397957},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Athens, Greece}
}

@proceedings{10.1145/3545008,
title = {ICPP '22: Proceedings of the 51st International Conference on Parallel Processing},
year = {2022},
isbn = {9781450397339},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
location = {Bordeaux, France}
}

